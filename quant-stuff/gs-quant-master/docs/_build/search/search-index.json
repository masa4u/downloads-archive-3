[
    {
        "body": "gs_quant base Priceable class Priceable kwargs source __init__ kwargs Initialize self See help type self for accurate signature Methods",
        "key": "classes/gs_quant.base.Priceable",
        "title": "gs_quant base Priceable"
    },
    {
        "body": "gs_quant data DataContext class DataContext start None end None source __init__ start None end None source Initialize self See help type self for accurate signature Methods Attributes",
        "key": "classes/gs_quant.data.DataContext",
        "title": "gs_quant data DataContext"
    },
    {
        "body": "gs_quant data Dataset class Dataset dataset_id provider None source A collection of related data __init__ dataset_id provider None source Parameters dataset_id Union str Vendor The dataset s identifier provider Optional DataApi The data provider Methods Attributes",
        "key": "classes/gs_quant.data.Dataset",
        "title": "gs_quant data Dataset"
    },
    {
        "body": "gs_quant data Fields class Fields value object object names None module None type None start 1 source Data field enumeration Enumeration of fields available through data APIs __init__ args kwds Initialize self See help type self for accurate signature Attributes",
        "key": "classes/gs_quant.data.Fields",
        "title": "gs_quant data Fields"
    },
    {
        "body": "CommodOTCSwap For methods of this class see gs_quant base Priceable class CommodOTCSwap start None end None number_of_periods None strategy None quantity None quantity_unit None quantity_period None legs None settlement None name None source Object representation of a commodities swap Properties end Date or Contract Month Return type Union date str instrument_quantity Return type float legs Commodities OTC swap leg Return type Tuple CommodOTCSwapLeg number_of_periods The number of settlement periods Return type int provider quantity Size of some value i e notional like 1 3b 1 5 1000 Return type Union float str quantity_period A coding scheme to define a period corresponding to a quantity amount Return type Union Period str quantity_unit Commodity asset Return type str resolution_key Return type RiskKey settlement read only description in plain English of settlement terms Return type str start Date or Contract Month Return type Union date str strategy Strip and Commodity Spread Type Swap Strategy Return type str unresolved",
        "key": "classes/gs_quant.instrument.CommodOTCSwap",
        "title": "CommodOTCSwap"
    },
    {
        "body": "EqCliquet For methods of this class see gs_quant base Priceable class EqCliquet underlier None underlier_type None expiration_date None strike_price None currency None first_valuation_date None global_floor 1000000 global_cap 1000000 last_valuation_date None notional_amount None payment_frequency Maturity return_style Rate of Return return_type Sum valuation_period None name None source Object representation of an Equity Cliquet Properties currency Currency ISO 4217 currency code or exchange quote modifier e g GBP vs GBp Return type Union Currency str expiration_date Date or tenor e g 2018 09 03 3m Dec21 Return type Union date str first_valuation_date ISO 8601 formatted date Return type date global_cap Global Cap of return relevant only if paying at maturity Return type float global_floor Global Floor of return relevant only if paying at maturity Return type float instrument_quantity Return type float last_valuation_date ISO 8601 formatted date Return type date notional_amount Notional of this position Return type Union float str payment_frequency Return type str provider resolution_key Return type RiskKey return_style Return calculation style Return type str return_type Sum or Product of periodic return relevant only if paying at maturity Return type str strike_price Strike price as value Return type float underlier Underlier security identifier Return type Union float str underlier_type Type of underlyer Return type Union UnderlierType str unresolved valuation_period Tenor Return type str",
        "key": "classes/gs_quant.instrument.EqCliquet",
        "title": "EqCliquet"
    },
    {
        "body": "EqForward For methods of this class see gs_quant base Priceable class EqForward underlier None underlier_type None expiration_date None forward_price None number_of_shares 1 name None source Object representation of an equity forward Properties expiration_date Date or tenor e g 2018 09 03 3m Dec21 Return type Union date str forward_price Forward price Return type float instrument_quantity Return type float number_of_shares Number of shares Return type int provider resolution_key Return type RiskKey underlier Underlier security identifier Return type Union float str underlier_type Type of underlyer Return type Union UnderlierType str unresolved",
        "key": "classes/gs_quant.instrument.EqForward",
        "title": "EqForward"
    },
    {
        "body": "EqOption For methods of this class see gs_quant base Priceable class EqOption underlier None expiration_date None strike_price None option_type None option_style None number_of_options None exchange None multiplier None settlement_date None settlement_currency None premium 0 premium_payment_date None valuation_time None method_of_settlement None underlier_type None buy_sell None premium_currency None trade_as None name None source Instrument definition for equity option Properties buy_sell Buy or Sell side of contract Return type Union BuySell str exchange Name of marketplace where security derivative or other instrument is traded Return type str expiration_date Date or tenor e g 2018 09 03 3m Dec21 Return type Union date str instrument_quantity Return type float method_of_settlement How the option is settled e g Cash Physical Return type Union OptionSettlementMethod str multiplier Number of stock units per option contract Return type float number_of_options Number of options Return type float option_style Option Exercise Style Return type Union OptionStyle str option_type Option Type Return type Union OptionType str premium Option premium Return type float premium_currency Currency of the option premium Return type Union Currency str premium_payment_date Option premium Return type Union date str provider resolution_key Return type RiskKey settlement_currency Currency ISO 4217 currency code or exchange quote modifier e g GBP vs GBp Return type Union Currency str settlement_date Date or tenor e g 2018 09 03 3m Dec21 Return type Union date str strike_price Strike as value percent or at the money e g 62 5 95 ATM 25 ATMF 10 vol 100k pv p 10000 p 10000USD 200K BP or multiple strikes 65 4 45 8 Return type Union float str trade_as Option trade as i e listed otc lookalike etc Return type Union TradeAs str underlier Underlier security identifier Return type Union float str underlier_type Type of underlyer Return type Union UnderlierType str unresolved valuation_time Valuation time e g MktClose MktOpen of the underlying level for exercise Return type Union ValuationTime str",
        "key": "classes/gs_quant.instrument.EqOption",
        "title": "EqOption"
    },
    {
        "body": "EqSynthetic For methods of this class see gs_quant base Priceable class EqSynthetic underlier expiry currency None swap_type Eq Swap buy_sell None underlier_type None effective_date None num_of_underlyers None name None source Instrument definition for equity synthetics Properties buy_sell Buy or Sell side of contract Return type Union BuySell str currency Currency ISO 4217 currency code or exchange quote modifier e g GBP vs GBp Return type Union Currency str effective_date The date on which the synthetic becomes effective Return type date expiry Tenor Return type str instrument_quantity Return type float num_of_underlyers number of underlyers referenced in synthetic contract Return type float provider resolution_key Return type RiskKey swap_type Return type str underlier Underlier security identifier Return type Union float str underlier_type Type of underlyer Return type Union UnderlierType str unresolved",
        "key": "classes/gs_quant.instrument.EqSynthetic",
        "title": "EqSynthetic"
    },
    {
        "body": "EqVarianceSwap For methods of this class see gs_quant base Priceable class EqVarianceSwap underlier None underlier_type None expiration_date None strike_price None variance_cap None settlement_date None premium None name None source Instrument definition for equity variance swap Properties expiration_date Date or tenor e g 2018 09 03 3m Return type Union date str instrument_quantity Return type float premium VarSwap premium Return type Union float str provider resolution_key Return type RiskKey settlement_date Settlement date Return type Union date str strike_price Variance strike as value or percentage string e g 62 5 95 Return type Union float str underlier Underlier security identifier Return type Union float str underlier_type Type of underlyer Return type Union UnderlierType str unresolved variance_cap Variance Cap as absolute value Return type float",
        "key": "classes/gs_quant.instrument.EqVarianceSwap",
        "title": "EqVarianceSwap"
    },
    {
        "body": "FXBinary For methods of this class see gs_quant base Priceable class FXBinary pair None buy_sell None option_type None notional_amount None notional_currency None strike_price None settlement_date None expiration_date None expiration_time None premium None premium_currency None premium_payment_date None fixing_source None name None source Object representation of a FX binary option Properties buy_sell Buy or Sell side of contract Return type Union BuySell str expiration_date Date or tenor e g 2018 09 03 3m Dec21 Return type Union date str expiration_time The location and optionally time of spot for expiration Return type str fixing_source The data source to be used for observation of FX spot on the fixing date Return type str instrument_quantity Return type float notional_amount Notional amount Return type Union float str notional_currency Currency ISO 4217 currency code or exchange quote modifier e g GBP vs GBp Return type Union Currency str option_type Option Type Return type Union OptionType str pair EURUSD or EUR USD Type A currency pair e g Return type str premium Option premium Return type Union float str premium_currency Currency of the option premium Return type Union Currency str premium_payment_date Payment date of the option premium Return type str provider resolution_key Return type RiskKey settlement_date Settlement date of the option after expiration Return type Union date str strike_price Strike as value percent or at the money e g 62 5 95 ATM 25 ATMF 10 vol 100k pv p 10000 p 10000USD 200K BP or multiple strikes 65 4 45 8 Return type Union float str unresolved",
        "key": "classes/gs_quant.instrument.FXBinary",
        "title": "FXBinary"
    },
    {
        "body": "FXForward For methods of this class see gs_quant base Priceable class FXForward pair None settlement_date None forward_rate None notional_amount None name None source Object representation of an FX forward Properties forward_rate Forward FX rate Return type Union float str instrument_quantity Return type float notional_amount Notional amount Return type Union float str pair EURUSD or EUR USD Type A currency pair e g Return type str provider resolution_key Return type RiskKey settlement_date Date or tenor e g 2018 09 03 3m Dec21 Return type Union date str unresolved",
        "key": "classes/gs_quant.instrument.FXForward",
        "title": "FXForward"
    },
    {
        "body": "FXMultiCrossBinary For methods of this class see gs_quant base Priceable class FXMultiCrossBinary buy_sell None legs None notional_amount None notional_currency None settlement_date None expiration_date None expiration_time None premium None premium_currency None premium_payment_date None name None source Object representation of an FX multi cross binary Properties buy_sell Buy or Sell side of contract Return type Union BuySell str expiration_date Date or tenor e g 2018 09 03 3m Dec21 Return type Union date str expiration_time The location and optionally time of spot for expiration Return type str instrument_quantity Return type float legs Object representation of a single leg of a multi cross binary option Return type Tuple FXMultiCrossBinaryLeg notional_amount Notional amount Return type Union float str notional_currency Currency ISO 4217 currency code or exchange quote modifier e g GBP vs GBp Return type Union Currency str premium Option premium Return type Union float str premium_currency Currency of the option premium Return type Union Currency str premium_payment_date Payment date of the option premium Return type str provider resolution_key Return type RiskKey settlement_date Settlement date of the option after expiration Return type Union date str unresolved",
        "key": "classes/gs_quant.instrument.FXMultiCrossBinary",
        "title": "FXMultiCrossBinary"
    },
    {
        "body": "FXMultiCrossBinaryLeg For methods of this class see gs_quant base Priceable class FXMultiCrossBinaryLeg pair None option_type None strike_price None fixing_source None name None source Object representation of a single leg of a multi cross binary option Properties fixing_source The data source to be used for observation of FX spot on the fixing date Return type str instrument_quantity Return type float option_type Option Type Return type Union OptionType str pair EURUSD or EUR USD Type A currency pair e g Return type str provider resolution_key Return type RiskKey strike_price Strike as value percent or at the money e g 62 5 95 ATM 25 ATMF 10 vol 100k pv p 10000 p 10000USD 200K BP or multiple strikes 65 4 45 8 Return type Union float str unresolved",
        "key": "classes/gs_quant.instrument.FXMultiCrossBinaryLeg",
        "title": "FXMultiCrossBinaryLeg"
    },
    {
        "body": "FXOption For methods of this class see gs_quant base Priceable class FXOption pair None buy_sell None option_type None notional_amount None notional_currency None notional_amount_other_currency None strike_price None settlement_date None settlement_currency None settlement_rate_option None method_of_settlement None expiration_date None expiration_time None premium None premium_currency None premium_payment_date None name None source Object representation of an FX option Properties buy_sell Buy or Sell side of contract Return type Union BuySell str expiration_date Date or tenor e g 2018 09 03 3m Dec21 Return type Union date str expiration_time The location and optionally time of spot for expiration Return type str instrument_quantity Return type float method_of_settlement How the option is settled e g Cash Physical Return type Union OptionSettlementMethod str notional_amount Notional amount Return type Union float str notional_amount_other_currency Notional amount in currency other than NotionalCurrency from the pair Return type Union float str notional_currency Currency ISO 4217 currency code or exchange quote modifier e g GBP vs GBp Return type Union Currency str option_type Option Type Return type Union OptionType str pair EURUSD or EUR USD Type A currency pair e g Return type str premium Option premium Return type Union float str premium_currency Currency of the option premium Return type Union Currency str premium_payment_date Payment date of the option premium Return type str provider resolution_key Return type RiskKey settlement_currency Currency of settlement Return type Union Currency str settlement_date Settlement date of the option after expiration Return type Union date str settlement_rate_option The source of spot for settlement Return type str strike_price Strike as value percent or at the money e g 62 5 95 ATM 25 ATMF 10 vol 100k pv p 10000 p 10000USD 200K BP or multiple strikes 65 4 45 8 Return type Union float str unresolved",
        "key": "classes/gs_quant.instrument.FXOption",
        "title": "FXOption"
    },
    {
        "body": "FXVolatilitySwap For methods of this class see gs_quant base Priceable class FXVolatilitySwap pair None buy_sell None strike_vol None notional_currency None notional_amount None first_fixing_date None last_fixing_date None settlement_date None fixing_source None fixing_frequency None annualization_factor None calculate_mean_return 0 name None source Object representation of an FX Vol Swap Properties annualization_factor Annualization factor is the number of days used per year to compute volatility Return type float buy_sell Buy or Sell side of contract Return type Union BuySell str calculate_mean_return Indicates whether the mean return is calculated true or taken as zero false in the realized volatility computation Return type float first_fixing_date First averaging date or observation date Return type Union date str fixing_frequency Fixing frequency ex Daily Business Days Return type str fixing_source The data source to be used for observations of FX spot on each fixing Return type str instrument_quantity Return type float last_fixing_date Last averaging date or valuation date Return type Union date str notional_amount Notional amount in dollar terms Return type Union float str notional_currency Notional currency Return type Union Currency str pair EURUSD or EUR USD Type A currency pair e g Return type str provider resolution_key Return type RiskKey settlement_date Date or tenor e g 2018 09 03 3m Dec21 Return type Union date str strike_vol Volatility strike Return type Union float str unresolved",
        "key": "classes/gs_quant.instrument.FXVolatilitySwap",
        "title": "FXVolatilitySwap"
    },
    {
        "body": "Forward For methods of this class see gs_quant base Priceable class Forward currency None expiration_date None notional_amount None name None source Forward cash payment Properties currency Currency ISO 4217 currency code or exchange quote modifier e g GBP vs GBp Return type Union Currency str expiration_date Date or tenor e g 2018 09 03 3m Dec21 Return type Union date str instrument_quantity Return type float notional_amount Notional amount Return type Union float str provider resolution_key Return type RiskKey unresolved",
        "key": "classes/gs_quant.instrument.Forward",
        "title": "Forward"
    },
    {
        "body": "IRBasisSwap For methods of this class see gs_quant base Priceable class IRBasisSwap termination_date None notional_currency None notional_amount None effective_date None principal_exchange None payer_spread None payer_rate_option None payer_designated_maturity None payer_frequency None payer_day_count_fraction None payer_business_day_convention None receiver_spread None receiver_rate_option None receiver_designated_maturity None receiver_frequency None receiver_day_count_fraction None receiver_business_day_convention None fee 0 fee_currency None fee_payment_date None clearing_house None name None source A single currency exchange of cashflows from different interest rate indices Properties clearing_house Swap Clearing House Return type Union SwapClearingHouse str effective_date The date on which the swap becomes effective Return type Union date str fee The fee Return type float fee_currency Currency of the fee Return type Union Currency str fee_payment_date Payment date of the fee Return type Union date str instrument_quantity Return type float notional_amount Notional amount Return type Union float str notional_currency Notional currency Return type Union Currency str payer_business_day_convention The business day convention for the payer Return type Union BusinessDayConvention str payer_day_count_fraction The day count fraction for the payer Return type Union DayCountFraction str payer_designated_maturity Tenor of the payerRateOption e g 3m 6m Return type str payer_frequency The frequency of payer payments e g 6m Return type str payer_rate_option The underlying benchmark for the payer e g USD LIBOR BBA EUR EURIBOR TELERATE Return type str payer_spread Spread over the payer rate Return type Union float str principal_exchange The date on which the swap becomes effective Return type Union PrincipalExchange str provider receiver_business_day_convention The business day convention for the receiver Return type Union BusinessDayConvention str receiver_day_count_fraction The day count fraction for the receiver Return type Union DayCountFraction str receiver_designated_maturity Tenor of the receiverRateOption e g 3m 6m Return type str receiver_frequency The frequency of receiver payments e g 6m Return type str receiver_rate_option The underlying benchmark for the receiver e g USD LIBOR BBA EUR EURIBOR TELERATE Return type str receiver_spread Spread over the receiver rate Return type Union float str resolution_key Return type RiskKey termination_date The termination of the swap e g 2050 04 01 10y Return type Union date str unresolved",
        "key": "classes/gs_quant.instrument.IRBasisSwap",
        "title": "IRBasisSwap"
    },
    {
        "body": "IRCMSOption For methods of this class see gs_quant base Priceable class IRCMSOption cap_floor None termination_date None notional_currency None notional_amount None effective_date None strike None index None multiplier None premium None premium_payment_date None fee 0 fee_currency None fee_payment_date None buy_sell None name None source Object representation of a constant maturity option cap floor straddle Properties buy_sell Buy or Sell side of contract Return type Union BuySell str cap_floor Structure type e g Cap Floor Straddle Binary Cap Return type str effective_date CMS option effective date e g 2019 01 01 10y Return type Union date str fee The fee Return type float fee_currency Currency of the fee Return type Union Currency str fee_payment_date Payment date of the fee Return type Union date str index The underlying benchmark i e 30yUSD Return type str instrument_quantity Return type float multiplier Multiplier Return type float notional_amount Notional amount Return type Union float str notional_currency Notional currency Return type Union Currency str premium The premium Return type Union float str premium_payment_date Payment date of the premium Return type Union date str provider resolution_key Return type RiskKey strike Strike as value percent or at the money e g 62 5 95 ATM 25 ATMF 10 vol 100k pv p 10000 p 10000USD 200K BP or multiple strikes 65 4 45 8 Return type Union float str termination_date Swap termination date e g 2030 05 01 10y Return type Union date str unresolved",
        "key": "classes/gs_quant.instrument.IRCMSOption",
        "title": "IRCMSOption"
    },
    {
        "body": "IRCMSOptionStrip For methods of this class see gs_quant base Priceable class IRCMSOptionStrip cap_floor None termination_date None notional_currency None notional_amount None effective_date None strike None index None floating_rate_frequency None floating_rate_day_count_fraction None floating_rate_business_day_convention None reset_delay None multiplier None premium None premium_payment_date None fee 0 fee_currency None fee_payment_date None buy_sell None name None source Object representation of a constant maturity option strip cap floor straddle Properties buy_sell Buy or Sell side of contract Return type Union BuySell str cap_floor Structure type e g Cap Floor Straddle Binary Cap Return type str effective_date CMS option effective date e g 2019 01 01 10y Return type Union date str fee The fee Return type float fee_currency Currency of the fee Return type Union Currency str fee_payment_date Payment date of the fee Return type Union date str floating_rate_business_day_convention The business day convention of the floating rate Return type Union BusinessDayConvention str floating_rate_day_count_fraction The day count fraction of the floating rate Return type Union DayCountFraction str floating_rate_frequency Period e g 3m 1y Return type str index The underlying benchmark i e 30yUSD Return type str instrument_quantity Return type float multiplier Multiplier Return type float notional_amount Notional amount Return type Union float str notional_currency Notional currency Return type Union Currency str premium The premium Return type Union float str premium_payment_date Payment date of the premium Return type Union date str provider reset_delay Delay of the reset e g 2d Return type str resolution_key Return type RiskKey strike Strike as value percent or at the money e g 62 5 95 ATM 25 ATMF 10 vol 100k pv p 10000 p 10000USD 200K BP or multiple strikes 65 4 45 8 Return type Union float str termination_date Swap termination date e g 2030 05 01 10y Return type Union date str unresolved",
        "key": "classes/gs_quant.instrument.IRCMSOptionStrip",
        "title": "IRCMSOptionStrip"
    },
    {
        "body": "IRCMSSpreadOption For methods of this class see gs_quant base Priceable class IRCMSSpreadOption cap_floor None termination_date None notional_currency None notional_amount None effective_date None strike None index1_tenor None index2_tenor None premium None premium_payment_date None fee 0 fee_currency None fee_payment_date None buy_sell None name None source Object representation of a constant maturity spread option cap floor straddle Properties buy_sell Buy or Sell side of contract Return type Union BuySell str cap_floor Structure type e g Cap Floor Straddle Return type str effective_date CMS option effective date e g 2019 01 01 10y Return type Union date str fee The fee Return type float fee_currency Currency of the fee Return type Union Currency str fee_payment_date Payment date of the fee Return type Union date str index1_tenor The tenor of the underlying benchmark to be the first element i e 30y Return type str index2_tenor The tenor of the underlying benchmark to be the second element i e 5y Return type str instrument_quantity Return type float notional_amount Notional amount Return type Union float str notional_currency Notional currency Return type Union Currency str premium The premium Return type Union float str premium_payment_date Payment date of the premium Return type Union date str provider resolution_key Return type RiskKey strike Strike as value percent or at the money e g 62 5 95 ATM 25 ATMF 10 vol 100k pv p 10000 p 10000USD 200K BP or multiple strikes 65 4 45 8 Return type Union float str termination_date Swap termination date e g 2030 05 01 10y Return type Union date str unresolved",
        "key": "classes/gs_quant.instrument.IRCMSSpreadOption",
        "title": "IRCMSSpreadOption"
    },
    {
        "body": "IRCMSSpreadOptionStrip For methods of this class see gs_quant base Priceable class IRCMSSpreadOptionStrip cap_floor None termination_date None notional_currency None notional_amount None effective_date None strike None index1 None index2 None floating_rate_frequency None floating_rate_day_count_fraction None floating_rate_business_day_convention None reset_delay None premium None premium_payment_date None fee 0 fee_currency None fee_payment_date None buy_sell None name None source Object representation of a constant maturity spread option strip cap floor straddle Properties buy_sell Buy or Sell side of contract Return type Union BuySell str cap_floor Structure type e g Cap Floor Straddle Binary Cap Return type str effective_date CMS option effective date e g 2019 01 01 10y Return type Union date str fee The fee Return type float fee_currency Currency of the fee Return type Union Currency str fee_payment_date Payment date of the fee Return type Union date str floating_rate_business_day_convention The business day convention of the floating rate Return type Union BusinessDayConvention str floating_rate_day_count_fraction The day count fraction of the floating rate Return type Union DayCountFraction str floating_rate_frequency Period e g 3m 1y Return type str index1 The underlying benchmark to be the first element from i e 30yUSD Return type str index2 The underlying benchmark to be the second element from i e 5yUSD Return type str instrument_quantity Return type float notional_amount Notional amount Return type Union float str notional_currency Notional currency Return type Union Currency str premium The premium Return type Union float str premium_payment_date Payment date of the premium Return type Union date str provider reset_delay Delay of the reset e g 2d Return type str resolution_key Return type RiskKey strike Strike as value percent or at the money e g 62 5 95 ATM 25 ATMF 10 vol 100k pv p 10000 p 10000USD 200K BP or multiple strikes 65 4 45 8 Return type Union float str termination_date Swap termination date e g 2030 05 01 10y Return type Union date str unresolved",
        "key": "classes/gs_quant.instrument.IRCMSSpreadOptionStrip",
        "title": "IRCMSSpreadOptionStrip"
    },
    {
        "body": "IRCap For methods of this class see gs_quant base Priceable class IRCap termination_date None notional_currency None notional_amount None effective_date None floating_rate_option None floating_rate_designated_maturity None floating_rate_frequency None floating_rate_day_count_fraction None floating_rate_business_day_convention None cap_rate None premium None premium_payment_date None fee 0 fee_currency None fee_payment_date None name None source Object representation of an interest rate cap Properties cap_rate The rate of this cap as value percent or at the money e g 62 5 95 ATM 25 ATMF Return type Union float str effective_date The date on which the cap becomes effective Return type Union date str fee The fee Return type float fee_currency Currency of the fee Return type Union Currency str fee_payment_date Payment date of the fee Return type Union date str floating_rate_business_day_convention The business day convention of the floating rate Return type Union BusinessDayConvention str floating_rate_day_count_fraction The day count fraction of the floating rate Return type Union DayCountFraction str floating_rate_designated_maturity Tenor of the floatingRateOption e g 3m 6m Return type str floating_rate_frequency The frequency of floating payments e g 3m Return type str floating_rate_option The underlying benchmark for the floating rate e g USD LIBOR BBA EUR EURIBOR TELERATE Return type str instrument_quantity Return type float notional_amount Notional amount Return type Union float str notional_currency Notional currency Return type Union Currency str premium The premium Return type Union float str premium_payment_date Payment date of the premium Return type Union date str provider resolution_key Return type RiskKey termination_date The termination of the cap e g 2025 04 01 2y Return type Union date str unresolved",
        "key": "classes/gs_quant.instrument.IRCap",
        "title": "IRCap"
    },
    {
        "body": "IRFloor For methods of this class see gs_quant base Priceable class IRFloor termination_date None notional_currency None notional_amount None effective_date None floating_rate_option None floating_rate_designated_maturity None floating_rate_frequency None floating_rate_day_count_fraction None floating_rate_business_day_convention None floor_rate None premium None premium_payment_date None fee 0 fee_currency None fee_payment_date None name None source Object representation of an interest rate floor Properties effective_date The date on which the floor becomes effective Return type Union date str fee The fee Return type float fee_currency Currency of the fee Return type Union Currency str fee_payment_date Payment date of the fee Return type Union date str floating_rate_business_day_convention The business day convention of the floating rate Return type Union BusinessDayConvention str floating_rate_day_count_fraction The day count fraction of the floating rate Return type Union DayCountFraction str floating_rate_designated_maturity Tenor of the floatingRateOption e g 3m 6m Return type str floating_rate_frequency The frequency of floating payments e g 3m Return type str floating_rate_option The underlying benchmark for the floating rate e g USD LIBOR BBA EUR EURIBOR TELERATE Return type str floor_rate The rate of this floor as value percent or at the money e g 62 5 95 ATM 25 ATMF Return type Union float str instrument_quantity Return type float notional_amount Notional amount Return type Union float str notional_currency Notional currency Return type Union Currency str premium The premium Return type Union float str premium_payment_date Payment date of the premium Return type Union date str provider resolution_key Return type RiskKey termination_date The termination of the floor e g 2025 04 01 2y Return type Union date str unresolved",
        "key": "classes/gs_quant.instrument.IRFloor",
        "title": "IRFloor"
    },
    {
        "body": "IRSwap For methods of this class see gs_quant base Priceable class IRSwap pay_or_receive None termination_date None notional_currency None notional_amount None effective_date None principal_exchange None floating_rate_for_the_initial_calculation_period None floating_rate_option None floating_rate_designated_maturity None floating_rate_spread None floating_rate_frequency None floating_rate_day_count_fraction None floating_rate_business_day_convention None fixed_rate None fixed_rate_frequency None fixed_rate_day_count_fraction None fixed_rate_business_day_convention None fee 0 fee_currency None fee_payment_date None clearing_house None fixed_first_stub None floating_first_stub None fixed_last_stub None floating_last_stub None fixed_holidays None floating_holidays None roll_convention None name None source A vanilla interest rate swap of fixed vs floating cashflows Properties clearing_house Swap Clearing House Return type Union SwapClearingHouse str effective_date The date on which the swap becomes effective Return type Union date str fee The fee Return type float fee_currency Currency of the fee Return type Union Currency str fee_payment_date Payment date of the fee Return type Union date str fixed_first_stub The date of the first stub for fixed leg Return type Union date str fixed_holidays The accrual calendar for fixed leg Return type str fixed_last_stub The date of the last stub for fixed leg Return type Union date str fixed_rate The coupon of the fixed leg Return type Union float str fixed_rate_business_day_convention The business day convention for the fixed rate Return type Union BusinessDayConvention str fixed_rate_day_count_fraction The day count fraction for the fixed rate Return type Union DayCountFraction str fixed_rate_frequency The frequency of fixed payments e g 6m Return type str floating_first_stub The date of the first stub for floating leg Return type Union date str floating_holidays The accrual calendar for floating leg Return type str floating_last_stub The date of the last stub for floating leg Return type Union date str floating_rate_business_day_convention The business day convention of the floating rate Return type Union BusinessDayConvention str floating_rate_day_count_fraction The day count fraction of the floating rate Return type Union DayCountFraction str floating_rate_designated_maturity Tenor of the floatingRateOption e g 3m 6m Return type str floating_rate_for_the_initial_calculation_period First fixing Return type float floating_rate_frequency The frequency of floating payments e g 3m Return type str floating_rate_option The underlying benchmark for the floating rate e g USD LIBOR BBA EUR EURIBOR TELERATE Return type str floating_rate_spread The spread over the floating rate Return type Union float str instrument_quantity Return type float notional_amount Notional amount Return type Union float str notional_currency Notional currency Return type Union Currency str pay_or_receive Pay or receive fixed Return type Union PayReceive str principal_exchange The date on which the swap becomes effective Return type Union PrincipalExchange str provider resolution_key Return type RiskKey roll_convention The roll convention Return type str termination_date The termination of the swap e g 2050 04 01 10y Return type Union date str unresolved",
        "key": "classes/gs_quant.instrument.IRSwap",
        "title": "IRSwap"
    },
    {
        "body": "IRSwaption For methods of this class see gs_quant base Priceable class IRSwaption pay_or_receive None termination_date None notional_currency None effective_date None notional_amount None expiration_date None floating_rate_option None floating_rate_designated_maturity None floating_rate_spread None floating_rate_frequency None floating_rate_day_count_fraction None floating_rate_business_day_convention None fixed_rate_frequency None fixed_rate_day_count_fraction None fixed_rate_business_day_convention None strike None premium None premium_payment_date None fee 0 fee_currency None fee_payment_date None clearing_house None settlement None buy_sell None name None source Object representation of a swaption Properties buy_sell Buy or Sell side of contract Return type Union BuySell str clearing_house Swap Clearing House Return type Union SwapClearingHouse str effective_date Swaption effective date e g 2019 01 01 10y Return type Union date str expiration_date Swaption expiration date 2020 05 01 3m Return type Union date str fee The fee Return type float fee_currency Currency of the fee Return type Union Currency str fee_payment_date Payment date of the fee Return type Union date str fixed_rate_business_day_convention The business day convention for the fixed rate Return type Union BusinessDayConvention str fixed_rate_day_count_fraction The day count fraction for the fixed rate Return type Union DayCountFraction str fixed_rate_frequency The frequency of fixed payments e g 6m Return type str floating_rate_business_day_convention The business day convention of the floating rate Return type Union BusinessDayConvention str floating_rate_day_count_fraction The day count fraction of the floating rate Return type Union DayCountFraction str floating_rate_designated_maturity Tenor Return type str floating_rate_frequency The frequency of floating payments e g 3m Return type str floating_rate_option The underlying benchmark for the floating rate e g USD LIBOR BBA EUR EURIBOR TELERATE Return type str floating_rate_spread The spread over the floating rate Return type float instrument_quantity Return type float notional_amount Notional amount Return type Union float str notional_currency Notional currency Return type Union Currency str pay_or_receive Pay or receive fixed Return type str premium The premium Return type Union float str premium_payment_date Payment date of the premium Return type Union date str provider resolution_key Return type RiskKey settlement Swap Settlement Type Return type Union SwapSettlement str strike Strike as value percent or at the money e g 62 5 95 ATM 25 ATMF 10 vol 100k pv p 10000 p 10000USD 200K BP or multiple strikes 65 4 45 8 Return type Union float str termination_date Swaption termination date e g 2030 05 01 10y Return type Union date str unresolved",
        "key": "classes/gs_quant.instrument.IRSwaption",
        "title": "IRSwaption"
    },
    {
        "body": "IRXccySwap For methods of this class see gs_quant base Priceable class IRXccySwap termination_date None notional_amount None effective_date None principal_exchange None payer_currency None payer_spread None payer_rate_option None payer_designated_maturity None payer_frequency None payer_day_count_fraction None payer_business_day_convention None receiver_currency None receiver_spread None receiver_rate_option None receiver_designated_maturity None receiver_frequency None receiver_day_count_fraction None receiver_business_day_convention None fee 0 fee_currency None fee_payment_date None initial_fx_rate None payer_first_stub None receiver_first_stub None payer_last_stub None receiver_last_stub None payer_holidays None receiver_holidays None notional_reset_side None name None source An exchange of cashflows from different interest rate indices Properties effective_date The date on which the swap becomes effective Return type Union date str fee The fee Return type float fee_currency Currency of the fee Return type Union Currency str fee_payment_date Payment date of the fee Return type Union date str initial_fx_rate Payment date of the fee Return type float instrument_quantity Return type float notional_amount Notional amount Return type float notional_reset_side Pay or Rec leg resetting Return type Union PayReceive str payer_business_day_convention The business day convention for the payer Return type Union BusinessDayConvention str payer_currency Payer currency Return type Union Currency str payer_day_count_fraction The day count fraction for the payer Return type Union DayCountFraction str payer_designated_maturity Tenor of the payerRateOption e g 3m 6m Return type str payer_first_stub The date of the first stub for payer leg Return type Union date str payer_frequency The frequency of payer payments e g 6m Return type str payer_holidays The accrual calendar for payer leg Return type str payer_last_stub The date of the last stub for payer leg Return type Union date str payer_rate_option The underlying benchmark for the payer e g USD LIBOR BBA EUR EURIBOR TELERATE Return type str payer_spread Spread over the payer rate Return type Union float str principal_exchange The date on which the swap becomes effective Return type Union PrincipalExchange str provider receiver_business_day_convention The business day convention for the receiver Return type Union BusinessDayConvention str receiver_currency Receiver currency Return type Union Currency str receiver_day_count_fraction The day count fraction for the receiver Return type Union DayCountFraction str receiver_designated_maturity Tenor of the receiverRateOption e g 3m 6m Return type str receiver_first_stub The date of the first stub for receiver leg Return type Union date str receiver_frequency The frequency of receiver payments e g 6m Return type str receiver_holidays The accrual calendar for receiver leg Return type str receiver_last_stub The date of the last stub for receiver leg Return type Union date str receiver_rate_option The underlying benchmark for the receiver e g USD LIBOR BBA EUR EURIBOR TELERATE Return type str receiver_spread Spread over the receiver rate Return type Union float str resolution_key Return type RiskKey termination_date The termination of the swap e g 2050 04 01 10y Return type Union date str unresolved",
        "key": "classes/gs_quant.instrument.IRXccySwap",
        "title": "IRXccySwap"
    },
    {
        "body": "IRXccySwapFixFix For methods of this class see gs_quant base Priceable class IRXccySwapFixFix termination_date None notional_amount None receiver_notional_amount None effective_date None principal_exchange None payer_currency None payer_rate None payer_frequency None payer_day_count_fraction None payer_business_day_convention None receiver_currency None receiver_rate None receiver_frequency None receiver_day_count_fraction None receiver_business_day_convention None fee 0 fee_currency None fee_payment_date None name None source An exchange of fixed cashflows in different currencies Properties effective_date The date on which the swap becomes effective Return type Union date str fee The fee Return type float fee_currency Currency of the fee Return type Union Currency str fee_payment_date Payment date of the fee Return type Union date str instrument_quantity Return type float notional_amount Notional amount Return type float payer_business_day_convention The business day convention for the payer Return type Union BusinessDayConvention str payer_currency Payer currency Return type Union Currency str payer_day_count_fraction The day count fraction for the payer Return type Union DayCountFraction str payer_frequency The frequency of payer payments e g 6m Return type str payer_rate Payer rate Return type Union float str principal_exchange The date on which the swap becomes effective Return type Union PrincipalExchange str provider receiver_business_day_convention The business day convention for the receiver Return type Union BusinessDayConvention str receiver_currency Receiver currency Return type Union Currency str receiver_day_count_fraction The day count fraction for the receiver Return type Union DayCountFraction str receiver_frequency The frequency of receiver payments e g 6m Return type str receiver_notional_amount Receiver notional amount Return type float receiver_rate Receiver rate Return type Union float str resolution_key Return type RiskKey termination_date The termination of the swap e g 2050 04 01 10y Return type Union date str unresolved",
        "key": "classes/gs_quant.instrument.IRXccySwapFixFix",
        "title": "IRXccySwapFixFix"
    },
    {
        "body": "IRXccySwapFixFlt For methods of this class see gs_quant base Priceable class IRXccySwapFixFlt pay_or_receive None termination_date None notional_amount None effective_date None principal_exchange None floating_rate_currency None floating_rate_for_the_initial_calculation_period None floating_rate_option None floating_rate_designated_maturity None floating_rate_spread None floating_rate_frequency None floating_rate_day_count_fraction None floating_rate_business_day_convention None fixed_rate_currency None fixed_rate None fixed_rate_frequency None fixed_rate_day_count_fraction None fixed_rate_business_day_convention None fee 0 fee_currency None fee_payment_date None fixed_first_stub None floating_first_stub None fixed_last_stub None floating_last_stub None fixed_holidays None floating_holidays None name None source An exchange of fixed vs floating cashflows in different currencies Properties effective_date The date on which the swap becomes effective Return type Union date str fee The fee Return type float fee_currency Currency of the fee Return type Union Currency str fee_payment_date Payment date of the fee Return type Union date str fixed_first_stub The date of the first stub for fixed leg Return type Union date str fixed_holidays The accrual calendar for fixed leg Return type str fixed_last_stub The date of the last stub for fixed leg Return type Union date str fixed_rate The coupon of the fixed leg Return type Union float str fixed_rate_business_day_convention The business day convention for the fixed rate Return type Union BusinessDayConvention str fixed_rate_currency Fixed rate currency Return type Union Currency str fixed_rate_day_count_fraction The day count fraction for the fixed rate Return type Union DayCountFraction str fixed_rate_frequency The frequency of fixed payments e g 6m Return type str floating_first_stub The date of the first stub for floating leg Return type Union date str floating_holidays The accrual calendar for floating leg Return type str floating_last_stub The date of the last stub for floating leg Return type Union date str floating_rate_business_day_convention The business day convention of the floating rate Return type Union BusinessDayConvention str floating_rate_currency Floating rate currency Return type Union Currency str floating_rate_day_count_fraction The day count fraction of the floating rate Return type Union DayCountFraction str floating_rate_designated_maturity Tenor of the floatingRateOption e g 3m 6m Return type str floating_rate_for_the_initial_calculation_period First fixing Return type float floating_rate_frequency The frequency of floating payments e g 3m Return type str floating_rate_option The underlying benchmark for the floating rate e g USD LIBOR BBA EUR EURIBOR TELERATE Return type str floating_rate_spread The spread over the floating rate Return type Union float str instrument_quantity Return type float notional_amount Notional amount Return type Union float str pay_or_receive Pay or receive fixed Return type Union PayReceive str principal_exchange The date on which the swap becomes effective Return type Union PrincipalExchange str provider resolution_key Return type RiskKey termination_date The termination of the swap e g 2050 04 01 10y Return type Union date str unresolved",
        "key": "classes/gs_quant.instrument.IRXccySwapFixFlt",
        "title": "IRXccySwapFixFlt"
    },
    {
        "body": "InflationSwap For methods of this class see gs_quant base Priceable class InflationSwap pay_or_receive None termination_date None notional_currency None effective_date None notional_amount None index None floating_rate_business_day_convention None fixed_rate None fixed_rate_business_day_convention None fee 0 base_cpi None clearing_house None name None source A vanilla inflation swap of fixed vs floating cashflows adjusted to an inflation rate Properties base_cpi Base CPI level Return type float clearing_house Swap Clearing House Return type Union SwapClearingHouse str effective_date The date on which the swap becomes effective Return type Union date str fee The fee Return type float fixed_rate The coupon of the fixed leg Return type Union float str fixed_rate_business_day_convention The business day convention for the fixed rate Return type Union BusinessDayConvention str floating_rate_business_day_convention The business day convention of the floating rate Return type Union BusinessDayConvention str index The underlying benchmark for the floating rate e g CPI U Return type str instrument_quantity Return type float notional_amount Notional amount Return type Union float str notional_currency Notional currency Return type Union Currency str pay_or_receive Pay or receive fixed Return type Union PayReceive str provider resolution_key Return type RiskKey termination_date The termination of the swap e g 2050 04 01 10y Return type Union date str unresolved",
        "key": "classes/gs_quant.instrument.InflationSwap",
        "title": "InflationSwap"
    },
    {
        "body": "Security For methods of this class see gs_quant base Priceable class Security ticker None bbid None ric None isin None cusip None prime_id None quantity 1 source A security specified by a well known identifier Properties bbid Bloomberg Id Identifier Return type str bbid_equivalent Bloomberg Equivalent Identifier Return type str bcid Bloomberg Composite Identifier Return type str cid Company Id Identifier Return type str cm_id Client Master Party Id Return type str cross Cross identifier Return type str cusip Cusip Identifier Return type str delisted Whether an asset has been delisted Return type str dollar_cross USD cross identifier for a particular currency Return type str eid EID Identifier Return type str em_id Entity Master Identifier Return type str exchange_code EEX Exchange Code Return type str gsid GSID Identifier Return type str gsid_equivalent GSID Equivalent Identifier Return type str gsideid GSID_EID Identifier Return type str gsn Goldman Sachs internal product number Return type str gss GS Symbol identifier Return type str instrument_quantity Return type float isin International Security Number Return type str jsn Japan Security Number Return type str lms_id Listed Market Symbol Return type str mdapi MDAPI Asset Return type str mdapi_class MDAPI Asset Class Return type str mic Market Identifier Code Return type str mq_symbol Marquee Symbol for generic MQ entities Return type str pl_id Platts Symbol Name Return type str plot_id Plot Identifier Return type str pnode_id Pricing node identifier sourced from Morningstar Return type str primary_country_ric Reuters Primary Country Instrument Code Identifier Return type str prime_id PrimeID Identifier Return type str provider ps_id Platts Symbol Return type str rcic Reuters Composite Instrument Code Identifier Return type str resolution_key Return type RiskKey ric Reuters Instrument Code identifier Return type str sec_name Internal Goldman Sachs security name Return type str sedol Sedol Identifier Return type str sf_id SalesForce ID Return type str simon_id SIMON product identifier Return type str tdapi TDAPI Description Return type str ticker Ticker Identifier Return type str unresolved valoren Valoren Identifier Return type str wi_id Weather Index Identifier Return type str wpk Wertpapier Kenn Nummer Return type str",
        "key": "classes/gs_quant.instrument.Security",
        "title": "Security"
    },
    {
        "body": "gs_quant markets HistoricalPricingContext class HistoricalPricingContext start None end None calendars dates None is_async False is_batch False use_cache False visible_to_gs False csa_term None market_data_location None timeout None show_progress False source A context for producing valuations over multiple dates __init__ start None end None calendars dates None is_async False is_batch False use_cache False visible_to_gs False csa_term None market_data_location None timeout None show_progress False source A context for producing valuations over multiple dates Parameters start Union int date None start date end Union int date None end date defaults to today calendars Union str Tuple holiday calendars dates Optional Iterable date a custom iterable of dates is_async bool return immediately True or wait for results False defaults to False is_batch bool use for calculations expected to run longer than 3 mins to avoid timeouts It can be used with is_async True False defaults to False use_cache bool store results in the pricing cache defaults to False visible_to_gs bool are the contents of risk requests visible to GS defaults to False csa_term Optional str the csa under which the calculations are made Default is local ccy ois index market_data_location Optional str the location for sourcing market data NYC LDN or HKG defaults to LDN Examples from gs_quant instrument import IRSwap ir_swap IRSwap Pay 10y DKK with HistoricalPricingContext 10 price_f ir_swap price price_series price_f result Methods Attributes",
        "key": "classes/gs_quant.markets.HistoricalPricingContext",
        "title": "gs_quant markets HistoricalPricingContext"
    },
    {
        "body": "gs_quant markets PricingContext class PricingContext pricing_date None market_data_location None is_async False is_batch False use_cache False visible_to_gs None csa_term None timeout None market None show_progress False source A context for controlling pricing and market data behaviour __init__ pricing_date None market_data_location None is_async False is_batch False use_cache False visible_to_gs None csa_term None timeout None market None show_progress False source The methods on this class should not be called directly Instead use the methods on the instruments as per the examples Parameters pricing_date Optional date the date for pricing calculations Default is today market_data_location Union PricingLocation str None the location for sourcing market data NYC LDN or HKG defaults to LDN is_async bool if True return a future immediately If False block defaults to False is_batch bool use for calculations expected to run longer than 3 mins to avoid timeouts It can be used with is_async True False defaults to False use_cache bool store results in the pricing cache defaults to False visible_to_gs Optional bool are the contents of risk requests visible to GS defaults to False csa_term Optional str the csa under which the calculations are made Default is local ccy ois index Examples To change the market data location of the default context from gs_quant markets import PricingContext import datetime as dt PricingContext current PricingContext market_data_location LDN For a blocking synchronous request from gs_quant instrument import IRCap cap IRCap 5y GBP with PricingContext price_f cap dollar_price price price_f result For an asynchronous request with PricingContext is_async True price_f cap dollar_price while not price_f done Methods Attributes",
        "key": "classes/gs_quant.markets.PricingContext",
        "title": "gs_quant markets PricingContext"
    },
    {
        "body": "gs_quant markets portfolio Portfolio class Portfolio priceables name None source A collection of instruments Portfolio holds a collection of instruments in order to run pricing and risk scenarios __init__ priceables name None source Creates a portfolio object which can be used to hold instruments Parameters priceables Union PriceableImpl Iterable PriceableImpl dict None constructed with an instrument portfolio iterable of either or a dictionary where key is name and value is a priceable Methods Attributes",
        "key": "classes/gs_quant.markets.portfolio.Portfolio",
        "title": "gs_quant markets portfolio Portfolio"
    },
    {
        "body": "gs_quant markets securities Asset class Asset id_ asset_class name exchange None currency None parameters None entity None source __init__ id_ asset_class name exchange None currency None parameters None entity None source Initialize self See help type self for accurate signature Methods Attributes",
        "key": "classes/gs_quant.markets.securities.Asset",
        "title": "gs_quant markets securities Asset"
    },
    {
        "body": "gs_quant markets securities AssetClass class AssetClass value source Asset classification of security Assets are classified into broad groups which exhibit similar characteristics and behave in a consistent way under different market conditions __init__ Initialize self See help type self for accurate signature Attributes",
        "key": "classes/gs_quant.markets.securities.AssetClass",
        "title": "gs_quant markets securities AssetClass"
    },
    {
        "body": "gs_quant markets securities AssetIdentifier class AssetIdentifier value source Asset type enumeration Enumeration of different security identifiers __init__ Initialize self See help type self for accurate signature Attributes",
        "key": "classes/gs_quant.markets.securities.AssetIdentifier",
        "title": "gs_quant markets securities AssetIdentifier"
    },
    {
        "body": "gs_quant markets securities AssetType class AssetType value source Asset type enumeration Enumeration of different types of asset or security __init__ Initialize self See help type self for accurate signature Attributes",
        "key": "classes/gs_quant.markets.securities.AssetType",
        "title": "gs_quant markets securities AssetType"
    },
    {
        "body": "gs_quant markets securities Index class Index id_ asset_class name exchange None currency None entity None source Index Asset Index which tracks an evolving portfolio of securities and can be traded through cash or derivatives markets __init__ id_ asset_class name exchange None currency None entity None source Initialize self See help type self for accurate signature Methods Attributes",
        "key": "classes/gs_quant.markets.securities.Index",
        "title": "gs_quant markets securities Index"
    },
    {
        "body": "gs_quant markets securities SecurityMaster class SecurityMaster source Security Master The SecurityMaster class provides an interface to security lookup functions This allows querying and retrieval of different security types assets based on a variety of different identifiers through point in time lookups Uses the current PricingContext to provide as of dates if optional arguments are not provided Will return the relevant asset subclass depending on the type of the security See also Asset __init__ Initialize self See help type self for accurate signature Methods",
        "key": "classes/gs_quant.markets.securities.SecurityMaster",
        "title": "gs_quant markets securities SecurityMaster"
    },
    {
        "body": "gs_quant markets securities Stock class Stock id_ name exchange None currency None entity None source Base Security Type Represents a financial asset which can be held in a portfolio or has an observable price fixing which can be referenced in a derivative transaction __init__ id_ name exchange None currency None entity None source Initialize self See help type self for accurate signature Methods Attributes",
        "key": "classes/gs_quant.markets.securities.Stock",
        "title": "gs_quant markets securities Stock"
    },
    {
        "body": "gs_quant models epidemiology EpidemicModel class EpidemicModel model parameters None data None initial_conditions None fit_method leastsq error None fit_period None source Class to perform solutions and parameter fitting of epidemic models __init__ model parameters None data None initial_conditions None fit_method leastsq error None fit_period None source A class to standardize fitting and solving epidemiological models Parameters model Type CompartmentalModel the model to use currently a class in the form of SIR SEIR above parameters Optional tuple tuple parameters to use for the model defaults to the output of model get_parameters data Optional array np array data that can be used to calibrate the model initial_conditions Optional list list initial conditions for the model fit_method str str the method to use to minimize the given error Available methods are those in the lmfit minimizer minimize function Default is Levenberg Marquardt least squares minimization error Optional callable callable control which residuals and in what form to minimize for fitting fit_period Optional float float how far back to fit the data defaults to fitting all data Methods",
        "key": "classes/gs_quant.models.epidemiology.EpidemicModel",
        "title": "gs_quant models epidemiology EpidemicModel"
    },
    {
        "body": "gs_quant models epidemiology SEIR class SEIR source SEIR Model __init__ Initialize self See help type self for accurate signature Methods",
        "key": "classes/gs_quant.models.epidemiology.SEIR",
        "title": "gs_quant models epidemiology SEIR"
    },
    {
        "body": "gs_quant models epidemiology SIR class SIR source SIR Model __init__ Initialize self See help type self for accurate signature Methods",
        "key": "classes/gs_quant.models.epidemiology.SIR",
        "title": "gs_quant models epidemiology SIR"
    },
    {
        "body": "gs_quant timeseries datetime Window class Window w None r None source Create a Window with size and ramp up to use Parameters w Union int str None window size r Union int str None ramp up value Defaults to the window size Returns new window object Usage The window size and ramp up value can either the number of observations or a string representation of the time period Examples Window size is 22 obversations and the ramp up value is 10 Window 22 10 Window size is one month and the ramp up size is one week Window 1m 1w Methods",
        "key": "classes/gs_quant.timeseries.datetime.Window",
        "title": "gs_quant timeseries datetime Window"
    },
    {
        "body": "gs_quant timeseries statistics LinearRegression class LinearRegression X y fit_intercept True source Fit an Ordinary least squares OLS linear regression model Parameters X Union Series List Series observations of the explanatory variable s y Series observations of the dependant variable fit_intercept bool whether to calculate intercept in the model Usage Fit OLS Model based on observations of the explanatory variables s X and the dependant variable y If X and y are not aligned only use the intersection of dates times Examples R Squared of an OLS model x generate_series 100 y generate_series 100 r LinearRegression x y r r_squared Methods",
        "key": "classes/gs_quant.timeseries.statistics.LinearRegression",
        "title": "gs_quant timeseries statistics LinearRegression"
    },
    {
        "body": "gs_quant timeseries statistics RollingLinearRegression class RollingLinearRegression X y w fit_intercept True source Fit a rolling ordinary least squares OLS linear regression model Parameters X Union Series List Series observations of the explanatory variable s y Series observations of the dependant variable w int number of observations in each rolling window Must be larger than the number of observations or explanatory variables fit_intercept bool whether to calculate intercept in the model Usage Fit OLS Model based on observations of the explanatory variables s X and the dependant variable y across a rolling window with fixed number of observations The parameters of each rolling window are stored at the end of each window If X and y are not aligned only use the intersection of dates times Examples R Squared of a rolling OLS model x generate_series 100 y generate_series 100 r RollingLinearRegression x y 5 r r_squared Methods",
        "key": "classes/gs_quant.timeseries.statistics.RollingLinearRegression",
        "title": "gs_quant timeseries statistics RollingLinearRegression"
    },
    {
        "body": "gs_quant timeseries statistics SEIRModel class SEIRModel beta None gamma None sigma None s None e None i None r None n None fit True fit_period None source SEIR Compartmental model for transmission of infectious disease Parameters beta Optional float transmission rate of the infection gamma Optional float recovery rate of the infection sigma Optional float immunity rate from exposed to infected s Union Series float None number of susceptible individuals in population e Union Series float None number of exposed individuals in population i Union Series float None number of infectious individuals in population r Union Series float None number of recovered individuals in population n Union Series float None total population size end_date end date for the evolution of the model fit bool whether to fit the model to the data fit_period Optional int on how many days back to fit the model Usage Fit SEIR Model based on the population in each compartment over a given time period The SEIR models the movement of individuals between four compartments susceptible S exposed E infected I and resistant R The model calibrates parameters Parameter Description S0 initial susceptible individuals E0 initial exposed individuals I0 initial infected individuals R0 initial recovered individuals beta Transmission rate from susceptible to exposed gamma Immunity rate from infected to resistant sigma Immunity rate from exposed to infected The parameters beta gamma and sigma model how fast people move from being susceptible to exposed beta from exposed to infected sigma and subsequently from infected to resistant gamma This model can be used to predict the populations of each compartment once calibrated Methods",
        "key": "classes/gs_quant.timeseries.statistics.SEIRModel",
        "title": "gs_quant timeseries statistics SEIRModel"
    },
    {
        "body": "gs_quant timeseries statistics SIRModel class SIRModel beta None gamma None s None i None r None n None fit True fit_period None source SIR Compartmental model for transmission of infectious disease Parameters beta Optional float transmission rate of the infection gamma Optional float recovery rate of the infection s Union Series float None number of susceptible individuals in population i Union Series float None number of infectious individuals in population r Union Series float None number of recovered individuals in population n Union Series float None total population size end_date end date for the evolution of the model fit bool whether to fit the model to the data fit_period Optional int on how many days back to fit the model Usage Fit SIR Model based on the population in each compartment over a given time period The SIR models the movement of individuals between three compartments susceptible S infected I and resistant R The model calibrates parameters Parameter Description S0 initial susceptible individuals I0 initial infected individuals R0 initial recovered individuals beta Transmission rate from susceptible to infected gamma Immunity rate from infected to resistant The parameters beta and gamma model how fast people move from being susceptible to infected beta and subsequently from infected to resistant gamma This model can be used to forecast the populations of each compartment once calibrated Methods",
        "key": "classes/gs_quant.timeseries.statistics.SIRModel",
        "title": "gs_quant timeseries statistics SIRModel"
    },
    {
        "body": "Data Package",
        "key": "data",
        "title": "Data Package"
    },
    {
        "body": "Datetime Package Date Point",
        "key": "datetime",
        "title": "Datetime Package Date Point"
    },
    {
        "body": "gs_quant datetime date business_day_count business_day_count begin_dates end_dates calendars week_mask None source Determine the number of business days between begin_dates and end_dates Parameters begin_dates Union date Iterable date A date or collection of beginning dates end_dates Union date Iterable date A date or collection of end dates calendars Union str Tuple str Calendars to use for holidays week_mask Optional str Which days are considered weekends defaults to Saturday and Sunday Return type Union int Tuple int Returns An int or tuple of ints representing the number of business days between begin_dates and end_dates Examples import datetime as dt today dt date today bus_days business_day_count today today dt timedelta days 7",
        "key": "functions/gs_quant.datetime.date.business_day_count",
        "title": "gs_quant datetime date business_day_count"
    },
    {
        "body": "gs_quant datetime date business_day_offset business_day_offset dates offsets roll raise calendars week_mask None source Apply offsets to the dates and move to the nearest business date Parameters dates Union date Iterable date The input date or dates offsets Union int Iterable int The number of days by which to adjust the dates roll str Which direction to roll in order to get to the nearest business date calendars Union str Tuple str Calendars to use for holidays week_mask Optional str Which days are considered weekends defaults to Saturday and Sunday Return type Union date Iterable date Returns A date if dates is a single date or tuple of dates adjusted by the offsets Examples import datetime as dt prev_bus_date business_day_offset dt date today 1 roll forward",
        "key": "functions/gs_quant.datetime.date.business_day_offset",
        "title": "gs_quant datetime date business_day_offset"
    },
    {
        "body": "gs_quant datetime date date_range date_range begin end calendars week_mask None source Construct a range of dates Parameters begin Union int date Beginning date or int An int will be interpreted as the number of business days before end which must be a date end Union int date End date or int An int will be interpreted as the number of business days after begin which must be a date calendars Union str Tuple str Calendars to use for holidays week_mask Optional str Which days are considered weekends defaults to Saturday and Sunday Return type Iterable date Returns A generator of dates import datetime as dt today dt date today dates tuple date_range 5 today for date in date_range dt date 2019 1 1 dt date 2019 2 1 print date",
        "key": "functions/gs_quant.datetime.date.date_range",
        "title": "gs_quant datetime date date_range"
    },
    {
        "body": "gs_quant datetime date is_business_day is_business_day dates calendars week_mask None source Determine whether each date in dates is a business day Parameters dates Union date Iterable date The input date or dates calendars Union str Tuple str Calendars to use for holidays week_mask Optional str Which days are considered weekends defaults to Saturday and Sunday Return type Union bool Tuple bool Returns True False if dates is a single date A tuple indicating True False for each date if dates is an iterable Examples import datetime as dt is_business_day dt date today is_business_day dt date 2019 7 4 calendars NYSE",
        "key": "functions/gs_quant.datetime.date.is_business_day",
        "title": "gs_quant datetime date is_business_day"
    },
    {
        "body": "gs_quant datetime date prev_business_date prev_business_date dates datetime date 2021 1 5 calendars week_mask None source Returns the previous business date for a given date or date series defaulting to today Parameters dates Union date Iterable date The input date or dates defaults to today calendars Union str Tuple str Calendars to use for holidays week_mask Optional str Which days are considered weekends defaults to Saturday and Sunday Return type Union date Iterable date Returns A date if dates is a single date or tuple of dates adjusted by the offset of one day Example import datetime as dt prev_bus_date prev_business_date",
        "key": "functions/gs_quant.datetime.date.prev_business_date",
        "title": "gs_quant datetime date prev_business_date"
    },
    {
        "body": "gs_quant datetime point point_sort_order point_sort_order point ref_date datetime date 2021 1 5 source Calculates a number that can be used to sort Mkt Points by it Parameters point str The point string from MarketDataCoordinate ref_date date Reference date normally the pricing date Return type float Returns The number of days from the reference date to the date specified by the point string Examples import datetime as dt days point_sort_order point Dec20 ref_date dt date today",
        "key": "functions/gs_quant.datetime.point.point_sort_order",
        "title": "gs_quant datetime point point_sort_order"
    },
    {
        "body": "gs_quant timeseries algebra abs_ abs_ x source Absolute value of each element in series Parameters x Series date based time series of prices Return type Series Returns date based time series of absolute value Usage Return the absolute value of X For each value in time series X_t return X_t if X_t is greater than or equal to 0 otherwise return X_t R_t X_t Equivalent to R_t sqrt X_t 2 Examples Generate price series and take absolute value of X_t 100 prices generate_series 100 100 abs_ prices See also exp sqrt",
        "key": "functions/gs_quant.timeseries.algebra.abs_",
        "title": "gs_quant timeseries algebra abs_"
    },
    {
        "body": "gs_quant timeseries algebra add add x y method Interpolate STEP step source Add two series or scalars Parameters x Union Series Real timeseries or scalar y Union Series Real timeseries or scalar method Interpolate interpolation method default step Only used when both x and y are timeseries Return type Union Series Real Returns timeseries of x y or sum of the given real numbers Usage Add two series or scalar variables with the given interpolation method R_t X_t Y_t Alignment operators Method Behavior intersect Resultant series only has values on the intersection of dates Values for dates present in only one series will be ignored nan Resultant series has values on the union of dates in both series Values for dates only available in one series will be treated as nan in the other series and therefore in the resultant series zero Resultant series has values on the union of dates in both series Values for dates only available in one series will be treated as zero in the other series step Resultant series has values on the union of dates in both series Values for dates only available in one series will be interpolated via step function in the other series time Resultant series have values on the union of dates times Missing values surrounded by valid values will be interpolated given length of interval Input series must use DateTimeIndex Examples Add two series a generate_series 100 b generate_series 100 add a b Interpolate STEP See also subtract",
        "key": "functions/gs_quant.timeseries.algebra.add",
        "title": "gs_quant timeseries algebra add"
    },
    {
        "body": "gs_quant timeseries algebra and_ and_ series source Logical and of two or more boolean series Parameters series Series input series Return type Series Returns result series of numeric type with booleans represented as 1s and 0s",
        "key": "functions/gs_quant.timeseries.algebra.and_",
        "title": "gs_quant timeseries algebra and_"
    },
    {
        "body": "gs_quant timeseries algebra ceil ceil x value 0 source Cap series at maximum value Parameters x Series date based time series of prices value float maximum value Return type Series Returns date based time series of maximum value Usage Returns series where all values are less than or equal to the maximum value R_t min X_t value See Floor and Ceil functions for more details Examples Generate price series and floor all values at 100 prices generate_series 100 floor prices 100 See also floor",
        "key": "functions/gs_quant.timeseries.algebra.ceil",
        "title": "gs_quant timeseries algebra ceil"
    },
    {
        "body": "gs_quant timeseries algebra divide divide x y method Interpolate STEP step source Divide two series or scalars Parameters x Union Series Real timeseries or scalar y Union Series Real timeseries or scalar method Interpolate interpolation method default step Only used when both x and y are timeseries Return type Union Series Real Returns timeseries of x y or quotient of the given real numbers Usage Divide two series or scalar variables applying the given interpolation method R_t X_t Y_t Alignment operators Method Behavior intersect Resultant series only has values on the intersection of dates Values for dates present in only one series will be ignored nan Resultant series has values on the union of dates in both series Values for dates only available in one series will be treated as nan in the other series and therefore in the resultant series zero Resultant series has values on the union of dates in both series Values for dates only available in one series will be treated as zero in the other series step Resultant series has values on the union of dates in both series Values for dates only available in one series will be interpolated via step function in the other series time Resultant series have values on the union of dates times Missing values surrounded by valid values will be interpolated given length of interval Input series must use DateTimeIndex Examples Divide two series a generate_series 100 b generate_series 100 divide a b Interpolate STEP See also multiply",
        "key": "functions/gs_quant.timeseries.algebra.divide",
        "title": "gs_quant timeseries algebra divide"
    },
    {
        "body": "gs_quant timeseries algebra exp exp x source Exponential of series Parameters x Series timeseries Return type Series Returns exponential of each element Usage For each element in the series X_t raise e Euler s number to the power of X_t Euler s number is the base of the natural logarithm ln R_t e X_t Examples Raise e to the power 1 Returns Euler s number approximately 2 71828 exp 1 See also log",
        "key": "functions/gs_quant.timeseries.algebra.exp",
        "title": "gs_quant timeseries algebra exp"
    },
    {
        "body": "gs_quant timeseries algebra filter_ filter_ x operator None value None source Removes values where comparison with the operator and value combination results in true defaults to removing missing values from the series Parameters x Series timeseries operator Optional FilterOperator FilterOperator describing logic for value removal e g less_than value Optional Real number indicating value s to remove from the series Return type Series Returns timeseries with specified values removed Usage Remove each value determined by operator and value from timeseries where that expression yields true Examples Remove 0 from time series prices generate_series 100 filter_ prices FilterOperator EQUALS 0 Remove positive numbers from time series prices generate_series 100 filter_ prices FilterOperator GREATER 0 Remove missing values from time series prices generate_series 100 filter_ prices",
        "key": "functions/gs_quant.timeseries.algebra.filter_",
        "title": "gs_quant timeseries algebra filter_"
    },
    {
        "body": "gs_quant timeseries algebra floor floor x value 0 source Floor series at minimum value Parameters x Series date based time series of prices value float minimum value Return type Series Returns date based time series of maximum value Usage Returns series where all values are greater than or equal to the minimum value R_t max X_t value See Floor and Ceil functions for more details Examples Generate price series and floor all values at 100 prices generate_series 100 floor prices 100 See also ceil",
        "key": "functions/gs_quant.timeseries.algebra.floor",
        "title": "gs_quant timeseries algebra floor"
    },
    {
        "body": "gs_quant timeseries algebra floordiv floordiv x y method Interpolate STEP step source Floor divide two series or scalars Parameters x Union Series Real timeseries or scalar y Union Series Real timeseries or scalar method Interpolate interpolation method default step Only used for operating two series Return type Union Series Real Returns timeseries of x y or quotient of the floor division of the given real numbers Usage Divide two series or scalar variables applying the given interpolation method R_t X_t Y_t Alignment operators Method Behavior intersect Resultant series only has values on the intersection of dates Values for dates present in only one series will be ignored nan Resultant series has values on the union of dates in both series Values for dates only available in one series will be treated as nan in the other series and therefore in the resultant series zero Resultant series has values on the union of dates in both series Values for dates only available in one series will be treated as zero in the other series step Resultant series has values on the union of dates in both series Values for dates only available in one series will be interpolated via step function in the other series Examples Floor divide two series a generate_series 100 b generate_series 100 floordiv a b Interpolate STEP See also divide",
        "key": "functions/gs_quant.timeseries.algebra.floordiv",
        "title": "gs_quant timeseries algebra floordiv"
    },
    {
        "body": "gs_quant timeseries algebra if_ if_ flags x y source Returns a series s For i in the index of flags s i x i if flags i 1 else y i Parameters flags Series series of 1s and 0s x Union Series float values to use when flag is 1 y Union Series float values to use when flag is 0 Return type Series Returns result series",
        "key": "functions/gs_quant.timeseries.algebra.if_",
        "title": "gs_quant timeseries algebra if_"
    },
    {
        "body": "gs_quant timeseries algebra log log x source Natural logarithm of series Parameters x Series timeseries Return type Series Returns series with exponential of each element Usage For each element in the series X_t return the natural logarithm ln of X_t The natural logarithm is the logarithm in base e R_t log X_t This function is the inverse of the exponential function More information on logarithms Examples Take natural logarithm of 3 log 3 See also exp",
        "key": "functions/gs_quant.timeseries.algebra.log",
        "title": "gs_quant timeseries algebra log"
    },
    {
        "body": "gs_quant timeseries algebra multiply multiply x y method Interpolate STEP step source Multiply two series or scalars Parameters x Union Series Real timeseries or scalar y Union Series Real timeseries or scalar method Interpolate interpolation method default step Only used when both x and y are timeseries Return type Union Series Real Returns timeseries of x y or product of the given real numbers Usage Multiply two series or scalar variables applying the given interpolation method R_t X_t times Y_t Alignment operators Method Behavior intersect Resultant series only has values on the intersection of dates Values for dates present in only one series will be ignored nan Resultant series has values on the union of dates in both series Values for dates only available in one series will be treated as nan in the other series and therefore in the resultant series zero Resultant series has values on the union of dates in both series Values for dates only available in one series will be treated as zero in the other series step Resultant series has values on the union of dates in both series Values for dates only available in one series will be interpolated via step function in the other series time Resultant series have values on the union of dates times Missing values surrounded by valid values will be interpolated given length of interval Input series must use DateTimeIndex Examples Multiply two series a generate_series 100 b generate_series 100 multiply a b Interpolate STEP See also divide",
        "key": "functions/gs_quant.timeseries.algebra.multiply",
        "title": "gs_quant timeseries algebra multiply"
    },
    {
        "body": "gs_quant timeseries algebra not_ not_ series source Logical negation of a single boolean series Parameters series Series single input series Return type Series Returns result series of numeric type with booleans represented as 1s and 0s",
        "key": "functions/gs_quant.timeseries.algebra.not_",
        "title": "gs_quant timeseries algebra not_"
    },
    {
        "body": "gs_quant timeseries algebra or_ or_ series source Logical or of two or more boolean series Parameters series Series input series Return type Series Returns result series of numeric type with booleans represented as 1s and 0s",
        "key": "functions/gs_quant.timeseries.algebra.or_",
        "title": "gs_quant timeseries algebra or_"
    },
    {
        "body": "gs_quant timeseries algebra power power x y 1 source Raise each element in series to power Parameters x Series timeseries y float value Return type Series Returns date based time series of square roots Usage Raise each value in time series X_t to the power y R_t X_t y Examples Generate price series and raise each value to the power 2 prices generate_series 100 power prices 2 See also sqrt",
        "key": "functions/gs_quant.timeseries.algebra.power",
        "title": "gs_quant timeseries algebra power"
    },
    {
        "body": "gs_quant timeseries algebra repeat repeat x n 1 source Repeats values for days where data is missing For any date with missing data the last recorded value is used Optionally downsamples the result such that there are data points every n days Parameters x Series date based timeseries n int desired frequency of output Return type Series Returns a timeseries that has been forward filled and optionally downsampled Usage Fill missing values with last seen value e g to combine daily with weekly or monthly data",
        "key": "functions/gs_quant.timeseries.algebra.repeat",
        "title": "gs_quant timeseries algebra repeat"
    },
    {
        "body": "gs_quant timeseries algebra smooth_spikes smooth_spikes x threshold source Smooth out the spikes of a series If a point is larger smaller than 1 threshold times both neighbors replace it with the average of those neighbours Note the first and last points in the input series are dropped Parameters x Series timeseries threshold float minimum increment to trigger filter Return type Series Returns smoothed timeseries Usage Returns series where values that exceed the threshold relative to both neighbors are replaced Examples Generate price series and smooth spikes over a threshold of 0 5 prices generate_series 100 smooth_spikes prices 0 5 See also exponential_moving_average",
        "key": "functions/gs_quant.timeseries.algebra.smooth_spikes",
        "title": "gs_quant timeseries algebra smooth_spikes"
    },
    {
        "body": "gs_quant timeseries algebra sqrt sqrt x source Square root of a each element in a series or b a real number Parameters x Union Real Series date based time series of prices or real number Return type Union Real Series Returns date based time series of square roots or square root of given number Usage Return the square root of each value in time series X_t R_t sqrt X_t Examples Generate price series and take square root of each value prices generate_series 100 sqrt prices See also pow",
        "key": "functions/gs_quant.timeseries.algebra.sqrt",
        "title": "gs_quant timeseries algebra sqrt"
    },
    {
        "body": "gs_quant timeseries algebra subtract subtract x y method Interpolate STEP step source Add two series or scalars Parameters x Union Series Real timeseries or scalar y Union Series Real timeseries or scalar method Interpolate index alignment operator default intersect Only used when both x and y are timeseries Return type Union Series Real Returns timeseries of x y or difference between the given real numbers Usage Subtracts one series or scalar from another applying the given interpolation method R_t X_t Y_t Alignment operators Method Behavior intersect Resultant series only has values on the intersection of dates Values for dates present in only one series will be ignored nan Resultant series has values on the union of dates in both series Values for dates only available in one series will be treated as nan in the other series and therefore in the resultant series zero Resultant series has values on the union of dates in both series Values for dates only available in one series will be treated as zero in the other series step Resultant series has values on the union of dates in both series Values for dates only available in one series will be interpolated via step function in the other series time Resultant series have values on the union of dates times Missing values surrounded by valid values will be interpolated given length of interval Input series must use DateTimeIndex Examples Subtract one series from another a generate_series 100 b generate_series 100 subtract a b Interpolate STEP See also add",
        "key": "functions/gs_quant.timeseries.algebra.subtract",
        "title": "gs_quant timeseries algebra subtract"
    },
    {
        "body": "gs_quant timeseries algebra weighted_sum weighted_sum series weights source Calculate a weighted sum Parameters series List Series list of time series weights list list of weights Return type Series Returns time series of weighted average Usage Calculate a weighted sum e g for a basket Examples Generate price series and get a sum weights 70 30 prices1 generate_series 100 prices2 generate_series 100 mybasket weighted_sum prices1 prices2 0 7 0 3 See also basket",
        "key": "functions/gs_quant.timeseries.algebra.weighted_sum",
        "title": "gs_quant timeseries algebra weighted_sum"
    },
    {
        "body": "gs_quant timeseries analysis count count x source Count observations in series Parameters x Series time series Return type Series Returns number of observations Usage Count the number of valid observations in a series R_t R_ t 1 1 if X_t is not NaN and R_t R_ t 1 0 if X_t is NaN Examples Count observations in series series generate_series 100 count count series See also sum",
        "key": "functions/gs_quant.timeseries.analysis.count",
        "title": "gs_quant timeseries analysis count"
    },
    {
        "body": "gs_quant timeseries analysis diff diff x obs 1 source Diff observations with given lag Parameters x Series time series of prices obs int number of observations to lag Return type Series Returns date based time series of return Usage Compute the difference in series values over a given lag R_t X_t X_ t obs where obs is the number of observations to lag series in diff function Examples Diff prices levels series generate_series 100 returns diff series See also lag",
        "key": "functions/gs_quant.timeseries.analysis.diff",
        "title": "gs_quant timeseries analysis diff"
    },
    {
        "body": "gs_quant timeseries analysis first first x source First value of series Parameters x Series time series Return type Series Returns time series of first value Usage Return series with first value of X for all dates R_t X_0 where X_0 is the first value in the series Examples Last value of series series generate_series 100 returns first series See also last",
        "key": "functions/gs_quant.timeseries.analysis.first",
        "title": "gs_quant timeseries analysis first"
    },
    {
        "body": "gs_quant timeseries analysis lag lag x obs 1 mode LagMode EXTEND extend source Lag timeseries by a number of observations or a relative date Parameters x Series timeseries of prices obs Union Window int str non zero integer number of observations or relative date e g 90d 1d 1m 1y mode LagMode whether to extend series index into the future Return type Series Returns date based time series of return Usage Shift the series backwards by a specified number of observations R_t X_ t obs where obs is the number of observations to lag series Examples Lag series by 2 observations prices generate_series 100 lagged lag prices 2 Lag series by 1 year prices generate_series 100 lagged lag prices 1y See also diff",
        "key": "functions/gs_quant.timeseries.analysis.lag",
        "title": "gs_quant timeseries analysis lag"
    },
    {
        "body": "gs_quant timeseries analysis last last x source Last value of series as a series Parameters x Series time series Return type Series Returns time series of last value Usage Return series with last value of X for all dates R_t X_T where X_T is the last value in the series Examples Last value of series series generate_series 100 returns last series See also first",
        "key": "functions/gs_quant.timeseries.analysis.last",
        "title": "gs_quant timeseries analysis last"
    },
    {
        "body": "gs_quant timeseries analysis last_value last_value x source Last value of series as a scalar Parameters x Series time series Return type Union int float Returns last value Usage Return a scalar value X_T where T is the last index value in the series Examples Last value of series series generate_series 100 lv last_value series See also last",
        "key": "functions/gs_quant.timeseries.analysis.last_value",
        "title": "gs_quant timeseries analysis last_value"
    },
    {
        "body": "weighted_sum",
        "key": "functions/gs_quant.timeseries.analysis.weighted_sum",
        "title": "weighted_sum"
    },
    {
        "body": "gs_quant timeseries backtesting basket basket series weights costs None rebal_freq RebalFreq DAILY daily return_type ReturnType EXCESS_RETURN excess_return source Calculates a basket return series Parameters series list list of time series of instrument prices weights list list of weights costs Optional list list of execution costs in decimal defaults to costs of 0 rebal_freq RebalFreq rebalancing frequency Daily or Monthly return_type ReturnType return type of underlying instruments only excess return is supported Return type Series Returns time series of the resulting basket Usage Calculates a basket return series Examples Generate price series and combine them in a basket weights 70 30 which rebalances monthly and assumes execution costs 5bps and 10bps each time the constituents are traded prices1 generate_series 100 prices2 generate_series 100 mybasket basket prices1 prices2 0 7 0 3 0 0005 0 001 monthly See also prices",
        "key": "functions/gs_quant.timeseries.backtesting.basket",
        "title": "gs_quant timeseries backtesting basket"
    },
    {
        "body": "gs_quant timeseries datetime align align x y method Interpolate INTERSECT intersect source Align dates of two series or scalars Parameters x Union Series Real first timeseries or scalar y Union Series Real second timeseries or scalar method Interpolate interpolation method default intersect Only used when both x and y are timeseries Return type Union List Series List Real Returns timeseries with specified dates or two scalars from the input Usage Align the dates of two series using the specified interpolation method Returns two series with dates based on the method of interpolation for example can be used to intersect the dates of two series union dates with a defined manner to compute missing values Interpolation methods Type Behavior intersect Resultant series only have values on the intersection of dates times nan Resultant series have values on the union of dates times Values will be NaN for dates or times only present in the other series zero Resultant series have values on the union of dates times Values will be zero for dates or times only present in the other series step Resultant series have values on the union of dates times Each series will use the value of the previous valid point if requested date does not exist Values prior to the first date will be equivalent to the first available value time Resultant series have values on the union of dates times Missing values surrounded by valid values will be interpolated given length of interval Input series must use DateTimeIndex Examples Stepwize interpolation of series based on dates in second series a generate_series 100 b generate_series 100 align a b See also sub",
        "key": "functions/gs_quant.timeseries.datetime.align",
        "title": "gs_quant timeseries datetime align"
    },
    {
        "body": "gs_quant timeseries datetime date_range date_range x start_date end_date weekdays_only False source Create a time series from a sub range of dates in an existing time series Parameters x Series time series start_date Union date int start date for the sliced time series If integer number of observations after the first end_date Union date int end date for the sliced time series If integer number of observations before the last weekdays_only bool whether to include only weekdays in the sliced ranges Return type Series Returns sliced time series Usage Returns a restricted sliced time series based on start and end dates Y_t R_t _ start t end Examples Slice the first and last week of a time series series generate_series 100 sliced_series date_range series 7 7 See also day func lag",
        "key": "functions/gs_quant.timeseries.datetime.date_range",
        "title": "gs_quant timeseries datetime date_range"
    },
    {
        "body": "gs_quant timeseries datetime day day x source Day of each value in series Parameters x Series time series Return type Series Returns day of observations Usage Returns the day as a numeric value for each observation in the series Y_t day t Day of the time or date is the integer day number within the month e g 1 31 Examples Day for observations in series series generate_series 100 days day series See also month year",
        "key": "functions/gs_quant.timeseries.datetime.day",
        "title": "gs_quant timeseries datetime day"
    },
    {
        "body": "gs_quant timeseries datetime interpolate interpolate x dates None method Interpolate INTERSECT intersect source Interpolate over specified dates or times Parameters x Series timeseries to interpolate dates Union List date List time Series None array of dates times or another series to interpolate method Interpolate interpolation method default intersect Return type Series Returns timeseries with specified dates Usage Interpolate the series X over the dates specified by the dates parameter This can be an array of dates or another series in which case the index of the series will be used to specify dates Interpolation methods Type Behavior intersect Resultant series only has values on the intersection of dates times Will only contain intersection of valid dates times in the series nan Resultant series only has values on the intersection of dates times Value will be NaN for dates not present in the series zero Resultant series has values on all requested dates times The series will have a value of zero where the requested date or time was not present in the series step Resultant series has values on all requested dates times The series will use the value of the previous valid point if requested date does not exist Values prior to the first date will be equivalent to the first available value Examples Stepwize interpolation of series based on dates in second series a generate_series 100 b generate_series 100 interpolate a b Interpolate INTERSECT See also sub",
        "key": "functions/gs_quant.timeseries.datetime.interpolate",
        "title": "gs_quant timeseries datetime interpolate"
    },
    {
        "body": "gs_quant timeseries datetime month month x source Month of each value in series Parameters x Series time series Return type Series Returns month of observations Usage Returns the month as a numeric value for each observation in the series Y_t month t Month of the time or date is the integer month number e g 1 12 Examples Day for observations in series series generate_series 100 days month series See also day year",
        "key": "functions/gs_quant.timeseries.datetime.month",
        "title": "gs_quant timeseries datetime month"
    },
    {
        "body": "gs_quant timeseries datetime prepend prepend x source Prepend data series Parameters x List Series an array of timeseries Return type Series Returns concatenated timeseries Usage For input series x_1 x_2 X_n takes data from series X_i until the first date for which X_ i 1 has data useful when a higher quality series has a shorter history than a lower quality series Examples Prepend two series x generate_series 100 y generate_series 100 prepend x y See also union",
        "key": "functions/gs_quant.timeseries.datetime.prepend",
        "title": "gs_quant timeseries datetime prepend"
    },
    {
        "body": "gs_quant timeseries datetime quarter quarter x source Quarter of each value in series Parameters x Series time series Return type Series Returns quarter of observations Usage Returns the quarter as a numeric value for each observation in the series Y_t quarter t Quarter of the time or date is the integer quarter number e g 1 2 3 4 Examples Quarter for observations in series series generate_series 100 days quarter series See also day month",
        "key": "functions/gs_quant.timeseries.datetime.quarter",
        "title": "gs_quant timeseries datetime quarter"
    },
    {
        "body": "gs_quant timeseries datetime union union x source Fill in missing dates or times of one series with another Parameters x List Series an array of timeseries Return type Series Returns combined series Usage Starting from i 1 takes points from series x_i Where points are missing from x_i returns points from x_ i 1 Examples Union of two series x generate_series 100 y generate_series 100 union x y See also prepend",
        "key": "functions/gs_quant.timeseries.datetime.union",
        "title": "gs_quant timeseries datetime union"
    },
    {
        "body": "gs_quant timeseries datetime value value x date method Interpolate STEP step source Value at specified date or time Parameters x Series timeseries date Union date time requested date or time method Interpolate interpolation method default step Return type Series Returns value at specified date or time Usage Returns the value of series X at the specified date Y_t X_ date If the requested date or time is not present in the series the value function will return the value from the previous available date or time by default Caller can specify other interpolation styles via the method param Interpolation methods Type Behavior intersect Only returns a value for valid dates nan Value will be NaN for dates not present in the series zero Value will be zero for dates not present in the series step Value of the previous valid point if requested date does not exist Values prior to the first date will be equivalent to the first available value Examples Value of series on 5Mar18 a generate_series 100 value a date 2019 1 3 See also interpolate",
        "key": "functions/gs_quant.timeseries.datetime.value",
        "title": "gs_quant timeseries datetime value"
    },
    {
        "body": "gs_quant timeseries datetime weekday weekday x source Weekday of each value in series Parameters x Series time series Return type Series Returns weekday of observations Usage Returns the weekday as a numeric value for each observation in the series Y_t weekday t Weekday of the time or date is the integer day of the week e g 0 6 where 0 represents Monday Examples Weekday for observations in series series generate_series 100 days weekday series See also day month",
        "key": "functions/gs_quant.timeseries.datetime.weekday",
        "title": "gs_quant timeseries datetime weekday"
    },
    {
        "body": "gs_quant timeseries datetime year year x source Year of each value in series Parameters x Series time series Return type Series Returns year of observations Usage Returns the year as a numeric value for each observation in the series Y_t year t Year of the time or date is the integer year number e g 2019 2020 Examples Year for observations in series series generate_series 100 days year series See also day month",
        "key": "functions/gs_quant.timeseries.datetime.year",
        "title": "gs_quant timeseries datetime year"
    },
    {
        "body": "gs_quant timeseries econometrics annualize annualize x source Annualize series based on sample observation frequency Parameters x Series time series of prices Return type Series Returns date based time series of annualized values Usage Based on number of days between observations will determine an annualization factor and then adjust values accordingly Useful for annualizing daily or monthly returns Y_t X_t sqrt F Annualization factors as follows based on period implied by observations Period Annualization Factor F Daily 252 Weekly 52 Bi Weekly 26 Monthly 12 Quarterly 4 Annually 1 Examples Annualize daily returns series prices generate_series 100 ann annualize returns prices See also returns",
        "key": "functions/gs_quant.timeseries.econometrics.annualize",
        "title": "gs_quant timeseries econometrics annualize"
    },
    {
        "body": "gs_quant timeseries econometrics beta beta x b w gs_quant timeseries helper Window object prices True source Rolling beta of price series and benchmark Parameters x Series time series of prices b Series time series of benchmark prices w Union Window int str Window int or str size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series prices bool True if input series are prices False if they are returns Return type Series Returns date based time series of beta Usage Calculate rolling beta beta_t of a series to a benchmark over a given window R_t alpha_t beta S_t epsilon_t Calculated as beta_t frac sum_ i t w 1 t Cov R_t S_t Var S_t where N is the number of observations in each rolling window w and R_t and S_t are the simple returns for each series on time t R_t frac X_t X_ t 1 1 and S_t frac b_t b_ t 1 1 If prices False assumes returns are provided R_t X_t and S_t b_t Cov R_t S_t and Var S_t are the mean and variance of series R_t and S_t over the same window If window is not provided computes beta over the full series Examples Compute rolling 1 month 22 business day beta of two price series series generate_series 100 benchmark generate_series 100 b beta series benchmark 22 See also var cov correlation returns",
        "key": "functions/gs_quant.timeseries.econometrics.beta",
        "title": "gs_quant timeseries econometrics beta"
    },
    {
        "body": "gs_quant timeseries econometrics change change x source Arithmetic series normalization Parameters x Series time series Return type Series Returns normalized time series Usage Compute difference of every value from the initial value of x Y_t X_t X_0 where X_0 is the first value in the series Examples Change in level from initial value series generate_series 100 returns change series See also index",
        "key": "functions/gs_quant.timeseries.econometrics.change",
        "title": "gs_quant timeseries econometrics change"
    },
    {
        "body": "gs_quant timeseries econometrics correlation correlation x y w gs_quant timeseries helper Window object type_ SeriesType PRICES prices source Rolling correlation of two price series Parameters x Series price series y Series price series w Union Window int str Window int or str size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series type type of both input series prices or returns Return type Series Returns date based time series of correlation Usage Calculate rolling realized correlation rho_t of two price series over a given window rho_t frac sum_ i t w 1 t R_t overline R_t Y_t overline S_t N 1 sigma R_t sigma S_t where N is the number of observations in each rolling window w and R_t and S_t are the simple returns for each series on time t If prices are provided R_t frac X_t X_ t 1 1 and S_t frac Y_t Y_ t 1 1 If returns are provided R_t X_t and S_t Y_t overline R_t overline S_t are the mean values and sigma R_ t and sigma S_ t are the sample standard deviations of series R_t and S_t over the same window If window is not provided computes realized correlation over the full series Examples Compute rolling 1 month 22 business day correlation of price series series1 generate_series 100 series2 generate_series 100 corr correlation series1 series2 22 See also std returns",
        "key": "functions/gs_quant.timeseries.econometrics.correlation",
        "title": "gs_quant timeseries econometrics correlation"
    },
    {
        "body": "gs_quant timeseries econometrics excess_returns_ excess_returns_ price_series currency RiskFreeRateCurrency USD USD source Calculate excess returns Parameters price_series Series price series currency RiskFreeRateCurrency currency for risk free rate defaults to USD Return type Series Returns excess returns Usage Given a price series P and risk free rate R excess returns E are defined as E_t E_ t 1 P_t P_ t 1 1 R D_t D_ t 1 360 The Actual 360 day count convention is used Examples Get excess returns from a price series er excess_returns generate_series 100 USD",
        "key": "functions/gs_quant.timeseries.econometrics.excess_returns_",
        "title": "gs_quant timeseries econometrics excess_returns_"
    },
    {
        "body": "gs_quant timeseries econometrics index index x initial 1 source Geometric series normalization Parameters x Series time series initial int initial value Return type Series Returns normalized time series Usage Divides every value in x by the initial value of x Y_t initial X_t X_0 where X_0 is the first value in the series Examples Normalize series to 1 series generate_series 100 returns index series See also returns",
        "key": "functions/gs_quant.timeseries.econometrics.index",
        "title": "gs_quant timeseries econometrics index"
    },
    {
        "body": "gs_quant timeseries econometrics max_drawdown max_drawdown x w gs_quant timeseries helper Window object source Compute the maximum peak to trough drawdown over a rolling window Parameters x Series time series w Union Window int str Window int or str size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns time series of rolling maximum drawdown Examples Compute the maximum peak to trough drawdown series generate_series 100 max_drawdown series See also returns",
        "key": "functions/gs_quant.timeseries.econometrics.max_drawdown",
        "title": "gs_quant timeseries econometrics max_drawdown"
    },
    {
        "body": "gs_quant timeseries econometrics prices prices series initial 1 type Returns SIMPLE simple source Calculate price levels from returns series Parameters series Series time series of returns initial int initial price level type Returns returns type simple logarithmic or absolute Return type Series Returns date based time series of return Usage Compute price levels from returns series based on the value of type Type Description simple Simple arithmetic returns logarithmic Logarithmic returns absolute Absolute returns Simple Compute asset price series from simple returns Y_t 1 X_ t 1 Y_ t 1 where X_t is the asset price at time t and Y_0 initial Logarithmic Compute asset price series from logarithmic returns Y_t e X_ t 1 Y_ t 1 where X_t is the asset price at time t and Y_0 initial Absolute Compute asset price series from absolute returns Y_t X_ t 1 Y_ t 1 where X_t is the asset price at time t and Y_0 initial Examples Generate price series and take compute returns series generate_series 100 returns prices returns series See also returns product exp",
        "key": "functions/gs_quant.timeseries.econometrics.prices",
        "title": "gs_quant timeseries econometrics prices"
    },
    {
        "body": "gs_quant timeseries econometrics returns returns series obs 1 type Returns SIMPLE simple source Calculate returns from price series Parameters series Series time series of prices obs int number of observations type Returns returns type simple logarithmic or absolute Return type Series Returns date based time series of return Usage Compute returns series from price levels based on the value of type Type Description simple Simple arithmetic returns logarithmic Logarithmic returns absolute Absolute returns Simple Simple geometric change in asset prices which can be aggregated across assets Y_t frac X_t X_ t obs 1 where X_t is the asset price at time t Logarithmic Natural logarithm of asset price changes which can be aggregated through time Y_t log X_t log X_ t obs where X_t is the asset price at time t Absolute Absolute change in asset prices Y_t X_t X_ t obs where X_t is the asset price at time t Examples Generate price series and take compute returns prices generate_series 100 returns returns prices See also prices",
        "key": "functions/gs_quant.timeseries.econometrics.returns",
        "title": "gs_quant timeseries econometrics returns"
    },
    {
        "body": "gs_quant timeseries econometrics sharpe_ratio sharpe_ratio series currency RiskFreeRateCurrency USD USD w None curve_type CurveType PRICES prices source Calculate Sharpe ratio Parameters series Series series of prices or excess returns for an asset currency RiskFreeRateCurrency currency for risk free rate defaults to USD curve_type CurveType whether input series is of prices or excess returns defaults to prices w Union Window int None Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value Return type Series Returns Sharpe ratio Usage Given a price series P risk free rate R and window of size w returns the rolling Sharpe ratio S S_t frac E_t E_ t w 1 365 25 D_t D_ t w 1 volatility E w _t Excess returns E are defined as E_t E_ t 1 P_t P_ t 1 1 R D_t D_ t 1 360 where D is the date for a data point The Actual 360 day count convention is used Examples Get rolling sharpe ratio of a price series with window of 252 sr sharpe_ratio generate_series 100 USD 252 CurveType PRICES See also volatility",
        "key": "functions/gs_quant.timeseries.econometrics.sharpe_ratio",
        "title": "gs_quant timeseries econometrics sharpe_ratio"
    },
    {
        "body": "gs_quant timeseries econometrics volatility volatility x w gs_quant timeseries helper Window object returns_type Returns SIMPLE simple source Realized volatility of price series Parameters x Series time series of prices w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series returns_type Returns returns type simple logarithmic or absolute Return type Series Returns date based time series of return Usage Calculate rolling annualized realized volatility of a price series over a given window Annual volatility of 20 is returned as 20 0 Y_t sqrt frac 1 N 1 sum_ i t w 1 t R_t overline R_t 2 sqrt 252 100 where N is the number of observations in each rolling window w R_t is the return on time t based on returns_type Type Description simple Simple geometric change in asset prices R_t frac X_t X_ t 1 1 where X_t is the asset price at time t logarithmic Natural logarithm of asset price changes R_t log X_t log X_ t 1 where X_t is the asset price at time t absolute Absolute change in asset prices Y_t X_t X_ t obs where X_t is the asset price at time t and overline R_t is the mean value over the same window overline R_t frac sum_ i t w 1 t R_t N If window is not provided computes realized volatility over the full series Examples Compute rolling 1 month 22 business day annualized volatility of price series series generate_series 100 vol_series volatility series 22 vol_series volatility series Window 22 30 See also std annualize returns",
        "key": "functions/gs_quant.timeseries.econometrics.volatility",
        "title": "gs_quant timeseries econometrics volatility"
    },
    {
        "body": "gs_quant timeseries statistics cov cov x y w gs_quant timeseries helper Window object source Rolling co variance of series over given window Parameters x Series series timeseries y Series series timeseries w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns timeseries of covariance Usage Provides unbiased estimator of sample co variance over a rolling window R_t frac 1 N 1 sum_ i t w 1 t X_i overline X_t Y_i overline Y_t where N is the number of observations in each rolling window w and overline X_t and overline Y_t represent the sample mean of series X_t and Y_t over the same window overline X_t frac sum_ i t w 1 t X_i N and overline Y_t frac sum_ i t w 1 t Y_i N If window is not provided computes variance over the full series Examples Generate price series and compute variance of returns over 22 observations prices_x generate_series 100 prices_y generate_series 100 cov returns prices_x returns prices_y 22 See also sum mean var",
        "key": "functions/gs_quant.timeseries.statistics.cov",
        "title": "gs_quant timeseries statistics cov"
    },
    {
        "body": "gs_quant timeseries statistics exponential_std exponential_std x beta 0 75 source Exponentially weighted standard deviation Parameters x Series time series beta float how much to weigh the previous price in the time series thus controlling how much importance we place on the more distant past Must be between 0 inclusive and 1 exclusive Return type Series Returns time series of standard deviation of the input series Usage Provides an unbiased estimator of exponentially weighted standard deviation of a series X_0 X_1 X_2 S_t sqrt EWMA X_t 2 EWMA X_t 2 DF_t where EWMA X_t is the exponential moving average at t see function exponential_moving_average DF_t is the debiasing factor see Weighted sample variance for further details DF_t frac sum_ i 0 t w_i 2 sum_ i 0 t w_i 2 sum_ i 0 t w_i 2 where w_i is the weight assigned to i th observation w_i 1 beta beta i for i t beta i for i t Examples Generate price series and compute exponentially weighted standard deviation of returns prices generate_series 100 exponential_std returns prices 0 9 See also std var exponential_moving_average",
        "key": "functions/gs_quant.timeseries.statistics.exponential_std",
        "title": "gs_quant timeseries statistics exponential_std"
    },
    {
        "body": "gs_quant timeseries statistics generate_series generate_series length source Generate sample timeseries Parameters length int number of observations Return type Series Returns date based time series of randomly generated prices Usage Create timeseries from returns generated from a normally distributed random variables IDD Length determines the number of observations to be generated Assume random variables R which follow a normal distribution with mean 0 and standard deviation of 1 R sim N 0 1 The timeseries is generated from these random numbers through X_t 1 R X_ t 1 Examples Generate price series with 100 observations starting from today s date prices generate_series 100 See also numpy random normal",
        "key": "functions/gs_quant.timeseries.statistics.generate_series",
        "title": "gs_quant timeseries statistics generate_series"
    },
    {
        "body": "gs_quant timeseries statistics max_ max_ x w gs_quant timeseries helper Window object source Maximum value of series over given window Parameters x Union Series List Series series a timeseries or an array of timeseries w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns timeseries of maximum value Usage Returns the maximum value of the series over each window If x is a series R_t max X_ t w 1 X_t where w is the size of the rolling window If x is an array of series R_t max X_ 1 t w 1 X_ n t where w is the size of the rolling window and n is the number of series If window is not provided returns the maximum value over the full series If the window size is greater than the available data will return maximum of available values Examples Maximum value of price series over the last 22 observations prices generate_series 100 max_ prices 22 See also min_",
        "key": "functions/gs_quant.timeseries.statistics.max_",
        "title": "gs_quant timeseries statistics max_"
    },
    {
        "body": "gs_quant timeseries statistics mean mean x w gs_quant timeseries helper Window object source Arithmetic mean of series over given window Parameters x Union Series List Series series a timeseries or an array of timeseries w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns timeseries of mean value Usage Calculates arithmetic mean of the series over a rolling window If a timeseries is provided R_t frac sum_ i t w 1 t X_i N where N is the number of observations in each rolling window w If an array of timeseries is provided R_t frac sum_ i t w 1 t sum_ j 1 n X_ ij N where n is the number of series and N is the number of observations in each rolling window w If window is not provided computes rolling mean over the full series If the window size is greater than the available data will return mean of available values Examples Generate price series and compute mean over 22 observations prices generate_series 100 mean prices 22 See also median mode",
        "key": "functions/gs_quant.timeseries.statistics.mean",
        "title": "gs_quant timeseries statistics mean"
    },
    {
        "body": "gs_quant timeseries statistics median median x w gs_quant timeseries helper Window object source Median value of series over given window Parameters x Series series timeseries w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns timeseries of median value Usage Computes the median value over a given window For each window this function will return the middle value when all elements in the window are sorted If the number of observations in the window is even will return the average of the middle two values If the window size is greater than the available data will return median of available values d frac w 1 2 R_t frac X_ lfloor t d rfloor X_ lceil t d rceil 2 where w is the size of the rolling window If window is not provided computes median over the full series Examples Generate price series and compute median over 22 observations prices generate_series 100 median prices 22 See also mean mode",
        "key": "functions/gs_quant.timeseries.statistics.median",
        "title": "gs_quant timeseries statistics median"
    },
    {
        "body": "gs_quant timeseries statistics min_ min_ x w gs_quant timeseries helper Window object source Minimum value of series over given window Parameters x Union Series List Series series a timeseries or an array of timeseries w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns timeseries of minimum value Usage Returns the minimum value of the series over each window If x is a series R_t min X_ t w 1 X_t where w is the size of the rolling window If x is an array of series R_t min X_ 1 t w 1 X_ n t where w is the size of the rolling window and n is the number of series If window is not provided returns the minimum value over the full series If the window size is greater than the available data will return minimum of available values Examples Minimum value of price series over the last 22 observations prices generate_series 100 min_ prices 22 See also max_",
        "key": "functions/gs_quant.timeseries.statistics.min_",
        "title": "gs_quant timeseries statistics min_"
    },
    {
        "body": "gs_quant timeseries statistics mode mode x w gs_quant timeseries helper Window object source Most common value in series over given window Parameters x Series series timeseries w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns timeseries of mode value Usage Computes the mode over a given window For each window this function will return the most common value of all elements in the window If there are multiple values with the same frequency of occurrence will return the smallest value If window is not provided computes mode over the full series Examples Generate price series and compute mode over 22 observations prices generate_series 100 mode prices 22 See also mean median",
        "key": "functions/gs_quant.timeseries.statistics.mode",
        "title": "gs_quant timeseries statistics mode"
    },
    {
        "body": "gs_quant timeseries statistics percentile percentile x n w None source Returns the nth percentile of a series Parameters x Series series n float percentile w Union Window int str None Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Return type Union Series float Returns nth percentile Usage Calculates the nth percentile rank of x Rolling nth percentile is returned if a window is specified else a scalar for nth percentile over the entire series Example Compute the 90th percentile of a series a generate_series 100 percentile a 90",
        "key": "functions/gs_quant.timeseries.statistics.percentile",
        "title": "gs_quant timeseries statistics percentile"
    },
    {
        "body": "gs_quant timeseries statistics percentiles percentiles x y None w gs_quant timeseries helper Window object source Rolling percentiles over given window Parameters x Series value series y Optional Series distribution series w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns timeseries of percentiles Usage Calculate percentile rank of y in the sample distribution of x over a rolling window of length w R_t frac sum_ i t N 1 t X_i Y_t 0 5 sum_ i t N 1 t X_i Y_t N times100 Where N is the number of observations in a rolling window If y is not provided calculates percentiles of x over its historical values If window length w is not provided uses an ever growing history of values If w is greater than the available data size returns empty Examples Compute percentile ranks of a series in the sample distribution of a second series over 22 observations a generate_series 100 b generate_series 100 percentiles a b 22 See also zscores",
        "key": "functions/gs_quant.timeseries.statistics.percentiles",
        "title": "gs_quant timeseries statistics percentiles"
    },
    {
        "body": "gs_quant timeseries statistics product product x w gs_quant timeseries helper Window object source Rolling product of series over given window Parameters x Series series timeseries w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns timeseries of rolling product Usage Calculate the product of observations over a given rolling window For each time t returns the value of all observations from t w 1 to t multiplied together R_t prod_ i t w 1 t X_i where w is the size of the rolling window If window is not provided computes product over the full series Examples Generate price series and compute rolling sum over 22 observations prices generate_series 100 product 1 returns prices See also sum_",
        "key": "functions/gs_quant.timeseries.statistics.product",
        "title": "gs_quant timeseries statistics product"
    },
    {
        "body": "gs_quant timeseries statistics range_ range_ x w gs_quant timeseries helper Window object source Range of series over given window Parameters x Series series timeseries w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns timeseries of range Usage Returns the range of the series max min over rolling window R_t max X_ t w 1 X_t min X_ t w 1 X_t where w is the size of the rolling window If window is not provided returns the range over the full series If the window size is greater than the available data will return range of all available values Examples Range of price series over the last 22 observations prices generate_series 100 range_ prices 22 See also min_ max_",
        "key": "functions/gs_quant.timeseries.statistics.range_",
        "title": "gs_quant timeseries statistics range_"
    },
    {
        "body": "gs_quant timeseries statistics std std x w gs_quant timeseries helper Window object source Rolling standard deviation of series over given window Parameters x Series series timeseries w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns timeseries of standard deviation Usage Provides unbiased estimator of sample standard deviation over a rolling window R_t sqrt frac 1 N 1 sum_ i t w 1 t X_i overline X_t 2 where N is the number of observations in each rolling window w and overline X_t is the mean value over the same window overline X_t frac sum_ i t w 1 t X_i N If window is not provided computes standard deviation over the full series Examples Generate price series and compute standard deviation of returns over 22 observations prices generate_series 100 std returns prices 22 See also sum mean var",
        "key": "functions/gs_quant.timeseries.statistics.std",
        "title": "gs_quant timeseries statistics std"
    },
    {
        "body": "gs_quant timeseries statistics sum_ sum_ x w gs_quant timeseries helper Window object source Rolling sum of series over given window Parameters x Union Series List Series series a timeseries or an array of timeseries w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns timeseries of rolling sum Usage Calculate the sum of observations over a given rolling window If x is a series R_t sum_ i t w 1 t X_i where w is the size of the rolling window If x is an array of series R_t sum_ i t w 1 t sum_ j 1 n X_ ij where w is the size of the rolling window and n is the number of series If window is not provided computes sum over the full series If the window size is greater than the available data will return sum of available values Examples Generate price series and compute rolling sum over 22 observations prices generate_series 100 sum_ prices 22 See also product",
        "key": "functions/gs_quant.timeseries.statistics.sum_",
        "title": "gs_quant timeseries statistics sum_"
    },
    {
        "body": "gs_quant timeseries statistics var var x w gs_quant timeseries helper Window object source Rolling variance of series over given window Parameters x Series series timeseries w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns timeseries of variance Usage Provides unbiased estimator of sample variance over a rolling window R_t frac 1 N 1 sum_ i t w 1 t X_i overline X_t 2 where N is the number of observations in each rolling window w and overline X_t is the mean value over the same window overline X_t frac sum_ i t w 1 t X_i N If window is not provided computes variance over the full series Examples Generate price series and compute variance of returns over 22 observations prices generate_series 100 var returns prices 22 See also var mean std",
        "key": "functions/gs_quant.timeseries.statistics.var",
        "title": "gs_quant timeseries statistics var"
    },
    {
        "body": "gs_quant timeseries statistics winsorize winsorize x limit 2 5 w gs_quant timeseries helper Window object source Limit extreme values in series Parameters x Series time series of prices limit float max z score of values w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns timeseries of winsorized values Usage Cap and floor values in the series which have a z score greater or less than provided value This function will restrict the distribution of values Calculates the sample standard deviation and adjusts values which fall outside the specified range to be equal to the upper or lower limits Lower and upper limits are defined as upper mu sigma times limit lower mu sigma times limit Where mu and sigma are sample mean and standard deviation The series is restricted by R_t max min X_t upper lower See winsorising for additional information Examples Generate price series and winsorize z score of returns over 22 observations prices generate_series 100 winsorize zscore returns prices 22 See also zscore mean std",
        "key": "functions/gs_quant.timeseries.statistics.winsorize",
        "title": "gs_quant timeseries statistics winsorize"
    },
    {
        "body": "gs_quant timeseries statistics zscores zscores x w gs_quant timeseries helper Window object source Rolling z scores over a given window Parameters x Series time series of prices w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns timeseries of z scores Usage Calculate standard score of each value in series over given window Standard deviation and sample mean are computed over the specified rolling window then element is normalized to provide a rolling z score R_t frac X_t mu sigma Where mu and sigma are sample mean and standard deviation over the given window If window is not provided computes z score relative to mean and standard deviation over the full series Examples Generate price series and compute z score of returns over 22 observations prices generate_series 100 zscores returns prices 22 See also mean std",
        "key": "functions/gs_quant.timeseries.statistics.zscores",
        "title": "gs_quant timeseries statistics zscores"
    },
    {
        "body": "gs_quant timeseries technicals bollinger_bands bollinger_bands x w gs_quant timeseries helper Window object k 2 source Bollinger bands with given window and width Parameters x Series time series of prices w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series k float band width in standard deviations default 2 Return type DataFrame Returns date based time series of return Usage Standard deviation bands around the moving average of asset price level Bollinger bands can be used to determine a range around the price level which responds to local volatility changes Returns two series upper u_t and lower l_t u_t bar X_t k sigma_t l_t bar X_t k sigma_t where bar X_t is the moving average over specified window and sigma_t is the rolling standard deviation over the specified window See Bollinger Bands for more information Examples Compute bollinger bands around 20 day moving average at 2 standard deviations prices generate_series 100 bollinger_bands prices 20 2 See also moving_average std",
        "key": "functions/gs_quant.timeseries.technicals.bollinger_bands",
        "title": "gs_quant timeseries technicals bollinger_bands"
    },
    {
        "body": "gs_quant timeseries technicals exponential_moving_average exponential_moving_average x beta 0 75 source Exponentially weighted moving average Parameters x Series time series of prices beta float how much to weigh the previous observations in the time series thus controlling how much importance we place on the more distant past Must be between 0 inclusive and 1 exclusive Return type Series Returns date based time series of return Usage The exponential ly weighted moving average EMA of a series X_0 X_1 X_2 is defined as Y_0 X_0 Y_t beta cdot Y_ t 1 1 beta cdot X_t where beta is the weight we place on the previous average See Exponential moving average for more information Examples Generate price series with 100 observations starting from today s date prices generate_series 100 exponential_moving_average prices 0 9 See also mean moving_average smoothed_moving_average",
        "key": "functions/gs_quant.timeseries.technicals.exponential_moving_average",
        "title": "gs_quant timeseries technicals exponential_moving_average"
    },
    {
        "body": "gs_quant timeseries technicals exponential_spread_volatility exponential_spread_volatility x beta 0 75 source Exponentially weighted spread volatility Parameters x Series time series of prices beta float how much to weigh the previous price in the time series thus controlling how much importance we place on the more distant past Must be between 0 inclusive and 1 exclusive Return type Series Returns date based time series of exponential spread volatility of the input series Usage Exponentially weights the daily differences of the input series calculates the annualized standard deviation Examples Generate price series and compute exponentially weighted standard deviation of returns prices generate_series 100 exponential_volatility prices 0 9 The above is equivalent to annualize exponential_std diff prices 1 0 9 See also volatility exponential_std exponential_volatility",
        "key": "functions/gs_quant.timeseries.technicals.exponential_spread_volatility",
        "title": "gs_quant timeseries technicals exponential_spread_volatility"
    },
    {
        "body": "gs_quant timeseries technicals exponential_volatility exponential_volatility x beta 0 75 source Exponentially weighted volatility Parameters x Series time series of prices beta float how much to weigh the previous price in the time series thus controlling how much importance we place on the more distant past Must be between 0 inclusive and 1 exclusive Return type Series Returns date based time series of exponential volatility of the input series Usage Calculates the exponentially weighted standard deviation of the return of the input series and annualizes the standard deviation Examples Generate price series and compute exponentially weighted standard deviation of returns prices generate_series 100 exponential_volatility prices 0 9 The above is equivalent to annualize exponential_std returns prices 0 9 100 See also volatility exponential_std exponential_spread_volatility",
        "key": "functions/gs_quant.timeseries.technicals.exponential_volatility",
        "title": "gs_quant timeseries technicals exponential_volatility"
    },
    {
        "body": "gs_quant timeseries technicals moving_average moving_average x w gs_quant timeseries helper Window object source Moving average over specified window Parameters x Series time series of prices w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns date based time series of return Usage Simple arithmetic moving average over the specified window number of observations Shorter windows will be more reactive to changes in the asset price but more volatile Larger windows will be smoother but less reactive to near term changes in asset prices R_t frac sum_ i t w 1 t X_t N where N is the number of observations in each rolling window w If window is not provided computes rolling mean over the full series Equivalent to mean Examples Generate price series with 100 observations starting from today s date prices generate_series 100 moving_average prices 22 See also mean",
        "key": "functions/gs_quant.timeseries.technicals.moving_average",
        "title": "gs_quant timeseries technicals moving_average"
    },
    {
        "body": "gs_quant timeseries technicals relative_strength_index relative_strength_index x w 14 source Relative Strength Index Parameters x Series time series of prices w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type DataFrame Returns date based time series of RSI Usage The RSI computes momentum as the ratio of higher closes to lower closes stocks which have had more or stronger positive changes have a higher RSI than stocks which have had more or stronger negative changes See RSI for more information Examples Compute relative strength index over a 14 day window prices generate_series 100 relative_strength_index prices 14 See also moving_average std smoothed_moving_average",
        "key": "functions/gs_quant.timeseries.technicals.relative_strength_index",
        "title": "gs_quant timeseries technicals relative_strength_index"
    },
    {
        "body": "gs_quant timeseries technicals smoothed_moving_average smoothed_moving_average x w gs_quant timeseries helper Window object source Smoothed moving average over specified window Parameters x Series time series of prices w Union Window int str Window or int size of window and ramp up to use e g Window 22 10 where 22 is the window size and 10 the ramp up value If w is a string it should be a relative date like 1m 1d etc Window size defaults to length of series Return type Series Returns date based time series of return Usage A modified moving average MMA running moving average RMA or smoothed moving average SMMA is defined as P_ MM today frac N 1 P_ MM yesterday P_today N where N is the number of observations in each rolling window w If window is not provided computes rolling mean over the full series See Modified moving average for more information Examples Generate price series with 100 observations starting from today s date prices generate_series 100 smoothed_moving_average prices 22 See also mean func moving_average",
        "key": "functions/gs_quant.timeseries.technicals.smoothed_moving_average",
        "title": "gs_quant timeseries technicals smoothed_moving_average"
    },
    {
        "body": "GS Quant API Packages Data Package gs_quant data DataContext gs_quant data Dataset gs_quant data Fields Datetime Package Date Point Instrument Package gs_quant base Priceable Instruments Markets Package gs_quant markets PricingContext gs_quant markets HistoricalPricingContext Portfolio Securities Models Package Epidemiology Risk Package Functions Measures Timeseries Package Algebra Analysis Backtesting Date Time Econometrics Statistics Technical Analysis Index",
        "key": "index",
        "title": "GS Quant API"
    },
    {
        "body": "Instrument Package Instruments",
        "key": "instrument",
        "title": "Instrument Package Instruments"
    },
    {
        "body": "Markets Package Portfolio Securities",
        "key": "markets",
        "title": "Markets Package Portfolio Securities"
    },
    {
        "body": "Models Package Epidemiology",
        "key": "models",
        "title": "Models Package Epidemiology"
    },
    {
        "body": "Risk Package Functions aggregate_risk results threshold None source Combine the results of multiple InstrumentBase calc calls into a single result Parameters results Iterable Union DataFrameWithInfo Future An iterable of Dataframes and or Futures returned by InstrumentBase calc threshold Optional float exclude values whose absolute value falls below this threshold Return type DataFrame Returns A Dataframe with the aggregated results Examples from gs_quant instrument import IRCap IRFloor from gs_quant markets import PricingContext from gs_quant risk import IRDelta IRVega cap IRCap 5y GBP floor IRFloor 5y GBP instruments cap floor with PricingContext delta_f inst calc IRDelta for inst in instruments vega_f inst calc IRVega for inst in cap floor delta aggregate_risk delta_f threshold 0 1 vega aggregate_risk vega_f delta_f and vega_f are lists of futures where the result will be a Dataframe delta and vega are Dataframes representing the merged risk of the individual instruments subtract_risk left right source Subtract bucketed risk Dimensions must be identical Parameters left DataFrameWithInfo Results to substract from right DataFrameWithInfo Results to substract Examples from gs_quant datetime date import business_day_offset from gs_quant instrument IRSwap from gs_quant markets import PricingContext from gs_quant risk import IRDelta import datetime as dt ir_swap IRSwap Pay 10y USD delta_today ir_swap calc IRDelta with PricingContext pricing_date business_day_offset dt date today 1 roll preceding delta_yday_f ir_swap calc IRDelta delta_diff subtract_risk delta_today delta_yday_f result Return type DataFrame sort_risk df by date time mkt_type mkt_asset mkt_class mkt_point source Sort bucketed risk Parameters df DataFrame Input Dataframe by Tuple str Columns to sort by Return type DataFrame Returns A sorted Dataframe Measures DollarPrice DollarPrice Present value in USD Price Price Present value in local currency ForwardPrice ForwardPrice Forward price Theta Theta 1 day Theta BaseCPI BaseCPI Base CPI level CommodDelta CommodDelta Commodity Delta CommodTheta CommodTheta Commodity Theta CommodVega CommodVega Commodity Vega EqDelta EqDelta Equity Delta EqGamma EqGamma Equity Gamma EqVega EqVega Equity Vega EqSpot EqSpot Equity Spot Level EqAnnualImpliedVol EqAnnualImpliedVol Equity Annual Implied Volatility FairVarStrike FairVarStrike Fair Variance Strike Value of a Variance Swap FairVolStrike FairVolStrike Fair Volatility Strike Value of a Variance Swap FXDelta FXDelta FX Delta FXGamma FXGamma FX Gamma FXVega FXVega FX Vega FXSpot FXSpot FX Spot Rate InflationDelta InflationDelta Inflation Delta InflationDeltaParallel InflationDeltaParallel Inflation Parallel Delta InflationDeltaParallelLocalCcy InflationDeltaParallelLocalCcy Inflation Parallel Delta Local Ccy IRBasis IRBasis Interest Rate Basis IRDelta IRDelta Interest Rate Delta IRDeltaParallel IRDeltaParallel Interest Rate Parallel Delta IRDeltaLocalCcy IRDeltaLocalCcy Interest Rate Delta Local Ccy IRDeltaParallelLocalCcy IRDeltaParallelLocalCcy Interest Rate Parallel Delta Local Ccy IRXccyDelta IRXccyDelta Cross ccy Delta IRXccyDeltaParallel IRXccyDeltaParallel Cross ccy Parallel Delta IRXccyDeltaParallelLocalCurrency IRXccyDeltaParallelLocalCurrency Cross ccy Parallel Delta Local Ccy IRGammaParallel IRGammaParallel Interest Rate Parallel Gamma IRGammaParallelLocalCcy IRGammaParallelLocalCcy Interest Rate Parallel Gamma Local Ccy IRVega IRVega Interest Rate Vega IRVegaParallel IRVegaParallel Interest Rate Parallel Vega IRVegaLocalCcy IRVegaLocalCcy Interest Rate Vega Local Ccy IRVegaParallelLocalCcy IRVegaParallelLocalCcy Interest Rate Parallel Vega Local Ccy IRAnnualImpliedVol IRAnnualImpliedVol Interest Rate Annual Implied Volatility IRAnnualATMImpliedVol IRAnnualATMImpliedVol Interest Rate Annual Implied At The Money Volatility IRDailyImpliedVol IRDailyImpliedVol Interest Rate Daily Implied Volatility bps IRSpotRate IRSpotRate At The Money Spot Rate IRFwdRate IRFwdRate Par Rate",
        "key": "risk",
        "title": "Risk Package Functions Measures"
    },
    {
        "body": "Timeseries Package Algebra Analysis Backtesting Date Time Econometrics Statistics Technical Analysis",
        "key": "timeseries",
        "title": "Timeseries Package Algebra Analysis Backtesting Date Time Econometrics Statistics Technical Analysis"
    }
]